"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dao_1 = require("../../dao/dao");
var tileMatrixDao_1 = require("../../tiles/matrix/tileMatrixDao");
var tileMatrixSetDao_1 = require("../../tiles/matrixset/tileMatrixSetDao");
var geometryColumnsDao_1 = require("../../features/columns/geometryColumnsDao");
var contents_1 = require("./contents");
var columnValues_1 = require("../../dao/columnValues");
/**
 * Contents object. Provides identifying and descriptive information that an
 * application can display to a user in a menu of geospatial data that is
 * available for access and/or update.
 * @class ContentsDao
 * @extends Dao
 */
var ContentsDao = /** @class */ (function (_super) {
    __extends(ContentsDao, _super);
    function ContentsDao() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.gpkgTableName = ContentsDao.TABLE_NAME;
        _this.idColumns = [ContentsDao.COLUMN_PK];
        return _this;
    }
    /**
     * Creates a new Contents object
     * @return {module:core/contents~Contents} new Contents object
     */
    ContentsDao.prototype.createObject = function () {
        return new contents_1.Contents();
    };
    /**
     * Get table names by table type
     * @param  {string} [tableType] table type to query for
     * @return {string[]}           Array of table names
     */
    ContentsDao.prototype.getTables = function (tableType) {
        var results;
        if (tableType) {
            var fieldValues = new columnValues_1.ColumnValues();
            fieldValues.addColumn(ContentsDao.COLUMN_DATA_TYPE, tableType);
            results = this.queryForColumns('table_name', fieldValues);
        }
        else {
            results = this.queryForColumns('table_name');
        }
        var tableNames = [];
        for (var i = 0; i < results.length; i++) {
            tableNames.push(results[i].table_name);
        }
        return tableNames;
    };
    /**
     * Returns the proj4 projection for the Contents
     * @param  {module:core/contents~Contents} contents Contents to get the projection from
     * @return {*}          proj4 projection
     */
    ContentsDao.prototype.getProjection = function (contents) {
        var srs = this.getSrs(contents);
        return this.geoPackage.spatialReferenceSystemDao.getProjection(srs);
    };
    /**
     * Get the SpatialReferenceSystemDao for the Contents
     * @param  {module:core/contents~Contents} contents Contents to get the SpatialReferenceSystemDao from
     * @return {module:core/srs~SpatialReferenceSystemDao}
     */
    ContentsDao.prototype.getSrs = function (contents) {
        return this.geoPackage.spatialReferenceSystemDao.queryForId(contents.srs_id);
    };
    /**
     * Get the GeometryColumns for the Contents
     * @param  {module:core/contents~Contents} contents Contents
     * @return {module:features/columns~GeometryColumns}
     */
    ContentsDao.prototype.getGeometryColumns = function (contents) {
        var _a;
        var dao = this.geoPackage.geometryColumnsDao;
        var results = dao.queryForAllEq(geometryColumnsDao_1.GeometryColumnsDao.COLUMN_TABLE_NAME, contents.table_name);
        if ((_a = results) === null || _a === void 0 ? void 0 : _a.length) {
            var gc = dao.createObject();
            dao.populateObjectFromResult(gc, results[0]);
            return gc;
        }
        return undefined;
    };
    /**
     * Get the TileMatrixSet for the Contents
     * @param  {module:core/contents~Contents} contents Contents
     * @return {module:tiles/matrixset~TileMatrixSet}
     */
    ContentsDao.prototype.getTileMatrixSet = function (contents) {
        var _a;
        var dao = this.geoPackage.tileMatrixSetDao;
        var results = dao.queryForAllEq(tileMatrixSetDao_1.TileMatrixSetDao.COLUMN_TABLE_NAME, contents.table_name);
        if ((_a = results) === null || _a === void 0 ? void 0 : _a.length) {
            var tms = dao.createObject();
            dao.populateObjectFromResult(tms, results[0]);
            return tms;
        }
        return undefined;
    };
    /**
     * Get the TileMatrix for the Contents
     * @param  {module:core/contents~Contents} contents Contents
     * @return {module:tiles/matrix~TileMatrix}
     */
    ContentsDao.prototype.getTileMatrix = function (contents) {
        var dao = this.geoPackage.tileMatrixDao;
        var results = dao.queryForAllEq(tileMatrixDao_1.TileMatrixDao.COLUMN_TABLE_NAME, contents.table_name);
        if (!results || !results.length)
            return undefined;
        var tileMatricies = [];
        for (var i = 0; i < results.length; i++) {
            var gc = dao.createObject();
            dao.populateObjectFromResult(gc, results[i]);
            tileMatricies.push(gc);
        }
        return tileMatricies;
    };
    ContentsDao.TABLE_NAME = 'gpkg_contents';
    ContentsDao.COLUMN_PK = 'table_name';
    ContentsDao.COLUMN_TABLE_NAME = 'table_name';
    ContentsDao.COLUMN_DATA_TYPE = 'data_type';
    ContentsDao.COLUMN_IDENTIFIER = 'identifier';
    ContentsDao.COLUMN_DESCRIPTION = 'description';
    ContentsDao.COLUMN_LAST_CHANGE = 'last_change';
    ContentsDao.COLUMN_MIN_X = 'min_x';
    ContentsDao.COLUMN_MIN_Y = 'min_y';
    ContentsDao.COLUMN_MAX_X = 'max_x';
    ContentsDao.COLUMN_MAX_Y = 'max_y';
    ContentsDao.COLUMN_SRS_ID = 'srs_id';
    ContentsDao.GPKG_CDT_FEATURES_NAME = 'features';
    ContentsDao.GPKG_CDT_TILES_NAME = 'tiles';
    ContentsDao.GPKG_CDT_ATTRIBUTES_NAME = 'attributes';
    return ContentsDao;
}(dao_1.Dao));
exports.ContentsDao = ContentsDao;
//# sourceMappingURL=contentsDao.js.map