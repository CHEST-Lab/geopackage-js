"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var geoPackage_1 = require("../../lib/geoPackage");
var geoPackageConnection_1 = require("../../lib/db/geoPackageConnection");
var GeoPackageTileRetriever = require('../../lib/tiles/retriever').GeoPackageTileRetriever, proj4 = require('proj4'), should = require('chai').should(), path = require('path'), fs = require('fs-extra');
describe('GeoPackage tests', function () {
    it('should get the feature table names', function (done) {
        geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'gdal_sample.gpkg')).then(function (geoPackageConnection) {
            var connection = geoPackageConnection;
            should.exist(connection);
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var tables = geoPackage.getFeatureTables();
            should.exist(tables);
            tables.length.should.be.equal(16);
            tables.should.have.members([
                'point2d',
                'linestring2d',
                'polygon2d',
                'multipoint2d',
                'multilinestring2d',
                'multipolygon2d',
                'geomcollection2d',
                'geometry2d',
                'point3d',
                'linestring3d',
                'polygon3d',
                'multipoint3d',
                'multilinestring3d',
                'multipolygon3d',
                'geomcollection3d',
                'geometry3d'
            ]);
            connection.close();
            done();
        });
    });
    it('should get the features', function () {
        return geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'gdal_sample.gpkg'))
            .then(function (geoPackageConnection) {
            var e_1, _a;
            var connection = geoPackageConnection;
            should.exist(connection);
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var featureDao = geoPackage.getFeatureDao('point2d');
            var each = featureDao.queryForEach();
            try {
                for (var each_1 = __values(each), each_1_1 = each_1.next(); !each_1_1.done; each_1_1 = each_1.next()) {
                    var row = each_1_1.value;
                    var currentRow = featureDao.getRow(row);
                    var geometry = currentRow.getGeometry();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (each_1_1 && !each_1_1.done && (_a = each_1.return)) _a.call(each_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            connection.close();
        });
    });
    it('should get the features from all tables', function () {
        return geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'gdal_sample.gpkg'))
            .then(function (connection) {
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var tables = geoPackage.getFeatureTables();
            tables.forEach(function (table) {
                var e_2, _a;
                var featureDao = geoPackage.getFeatureDao(table);
                if (!featureDao) {
                    throw new Error('No feature table exists');
                }
                var srs = featureDao.getSrs();
                var each = featureDao.queryForEach();
                try {
                    for (var each_2 = __values(each), each_2_1 = each_2.next(); !each_2_1.done; each_2_1 = each_2.next()) {
                        var row = each_2_1.value;
                        var currentRow = featureDao.getRow(row);
                        var geometry = currentRow.getGeometry();
                        if (!geometry) {
                            continue;
                        }
                        var geom = geometry.geometry;
                        var geoJson = geom.toGeoJSON();
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (each_2_1 && !each_2_1.done && (_a = each_2.return)) _a.call(each_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            });
            connection.close();
        });
    });
    it('should get the tile table names', function (done) {
        geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'rivers.gpkg'))
            .then(function (connection) {
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var tables = geoPackage.getTileTables();
            should.exist(tables);
            tables.length.should.be.equal(1);
            tables.should.have.members([
                'TILESosmds'
            ]);
            connection.close();
            done();
        });
    });
    it('should get the srs 3857', function (done) {
        geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'rivers.gpkg'))
            .then(function (connection) {
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var srs = geoPackage.getSrs(3857);
            should.exist(srs);
            srs.srs_id.should.be.equal(3857);
            connection.close();
            done();
        });
    });
    it('should get the feature dao from the contents', function () {
        return geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'rivers.gpkg'))
            .then(function (connection) {
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var contents = geoPackage.contentsDao.queryForId('FEATURESriversds');
            var featureDao = geoPackage.getFeatureDaoWithContents(contents);
            should.exist(featureDao);
            featureDao.getGeometryType().should.be.equal('GEOMETRY');
            featureDao.table_name.should.be.equal('FEATURESriversds');
            connection.close();
        });
    });
    it('should get the TILE dao from the contents', function () {
        return geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'rivers.gpkg'))
            .then(function (connection) {
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var contents = geoPackage.contentsDao.queryForId('TILESosmds');
            return geoPackage.getTileDaoWithContents(contents);
        });
    });
    it('should get the tiles', function () {
        return geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'rivers.gpkg'))
            .then(function (connection) {
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var tables = geoPackage.getTileTables();
            return tables.reduce(function (sequence, table) {
                return sequence.then(function () {
                    var tileDao = geoPackage.getTileDao(table);
                    var maxZoom = tileDao.maxZoom;
                    var minZoom = tileDao.minZoom;
                    var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
                    return gpr.getTile(0, 0, 1)
                        .then(function (tileData) {
                        should.exist(tileData);
                    });
                });
            }, Promise.resolve()).then(function () {
                connection.close();
            });
        });
    });
    it('should get the info for the table', function () {
        this.timeout(30000);
        return geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', 'rivers.gpkg'))
            .then(function (connection) {
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var dao = geoPackage.getFeatureDao('FEATURESriversds');
            var info = geoPackage.getInfoForTable(dao);
            should.exist(info);
            info.tableName.should.be.equal('FEATURESriversds');
            info.columnMap.property_0.displayName.should.be.equal('Scalerank');
            connection.close();
        });
    });
    it('should get the info for the Imagery table', function () {
        return geoPackageConnection_1.GeoPackageConnection.connect(path.join(__dirname, '..', 'fixtures', '3857.gpkg'))
            .then(function (connection) {
            var geoPackage = new geoPackage_1.GeoPackage('', '', connection);
            var tileDao = geoPackage.getTileDao('imagery');
            var info = geoPackage.getInfoForTable(tileDao);
            should.exist(info);
            info.tableName.should.be.equal('imagery');
            info.srs.id.should.be.equal(3857);
            connection.close();
        });
    });
    it('should exists default projection', function () {
        var result = geoPackage_1.GeoPackage.hasProjection('EPSG:4326');
        should.exist(result);
    });
    it('should throw error on invalid load projections argument', function () {
        (function () {
            geoPackage_1.GeoPackage.loadProjections(null);
        }).should.throw('Invalid array of projections');
    });
    it('should throw error on unknown projection item', function () {
        (function () {
            geoPackage_1.GeoPackage.loadProjections([null]);
        }).should.throw('Projection not found');
    });
    it('should load projections', function () {
        geoPackage_1.GeoPackage.loadProjections(['EPSG:4326']);
        var result = geoPackage_1.GeoPackage.hasProjection('EPSG:4326');
        should.exist(result);
    });
    it('should throw error on empty add projection args', function () {
        (function () {
            geoPackage_1.GeoPackage.addProjection(null, null);
        }).should.throw('Invalid projection name/definition');
    });
    it('should add projection', function () {
        geoPackage_1.GeoPackage.addProjection('EPSG:4001', '+proj=longlat +ellps=airy +no_defs');
        var result = geoPackage_1.GeoPackage.hasProjection('EPSG:4001');
        should.exist(result);
    });
});
//# sourceMappingURL=testGeoPackage.js.map