"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("../../../.");
var testSetup_1 = __importDefault(require("../../fixtures/testSetup"));
var dataColumnsDao_1 = require("../../../lib/dataColumns/dataColumnsDao");
var dataColumnConstraintsDao_1 = require("../../../lib/dataColumnConstraints/dataColumnConstraintsDao");
var DataColumns = require('../../../lib/dataColumns/dataColumns').DataColumns, DataColumnConstraints = require('../../../lib/dataColumnConstraints/dataColumnConstraints').DataColumnConstraints
// , GeoPackageAPI = require('../../../.')
// , testSetup = require('../../fixtures/testSetup')
, path = require('path'), should = require('chai').should();
describe('Data Columns tests', function () {
    var geoPackage;
    var originalFilename = path.join(__dirname, '..', '..', 'fixtures', 'rivers.gpkg');
    var filename;
    beforeEach('create the GeoPackage connection', function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filename = path.join(__dirname, '..', '..', 'fixtures', 'tmp', testSetup_1.default.createTempName());
                        return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                    case 1:
                        result = _a.sent();
                        filename = result.path;
                        geoPackage = result.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach('should close the geopackage', function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geoPackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should get the data column for property_0', function () {
        var dc = new dataColumnsDao_1.DataColumnsDao(geoPackage);
        var dataColumn = dc.getDataColumns('FEATURESriversds', 'property_0');
        dataColumn.should.be.deep.equal({
            table_name: 'FEATURESriversds',
            column_name: 'property_0',
            name: 'Scalerank',
            title: 'Scalerank',
            description: 'Scalerank',
            mime_type: null,
            constraint_name: null
        });
    });
    it('should get the contents for the data column for property_0', function () {
        var dc = new dataColumnsDao_1.DataColumnsDao(geoPackage);
        var dataColumn = dc.getDataColumns('FEATURESriversds', 'property_0');
        var contents = dc.getContents(dataColumn);
        contents.should.be.deep.equal({
            table_name: 'FEATURESriversds',
            data_type: 'features',
            identifier: 'FEATURESriversds',
            description: null,
            last_change: '2015-12-04T15:28:59.122Z',
            min_x: -20037508.342789244,
            min_y: -19971868.88040857,
            max_x: 20037508.342789244,
            max_y: 19971868.880408563,
            srs_id: 3857
        });
    });
    it('should get the data column for geom', function () {
        var dc = new dataColumnsDao_1.DataColumnsDao(geoPackage);
        var dataColumn = dc.getDataColumns('FEATURESriversds', 'geom');
        should.not.exist(dataColumn);
    });
    it('should create a data column', function () {
        var dao = new dataColumnsDao_1.DataColumnsDao(geoPackage);
        var dc = new DataColumns();
        dc.table_name = 'FEATURESriversds';
        dc.column_name = 'test';
        dc.name = 'Test Name';
        dc.title = 'Test';
        dc.description = 'Test Description';
        dc.mime_type = 'text/html';
        dc.constraint_name = 'test constraint';
        var result = dao.create(dc);
        should.exist(result);
        var dataColumn = dao.getDataColumns('FEATURESriversds', 'test');
        dataColumn.should.be.deep.equal({
            table_name: 'FEATURESriversds',
            column_name: 'test',
            name: 'Test Name',
            title: 'Test',
            description: 'Test Description',
            mime_type: 'text/html',
            constraint_name: 'test constraint'
        });
    });
    it('should query by the constraint name to retrieve a data column', function () {
        var e_1, _a;
        var dao = new dataColumnsDao_1.DataColumnsDao(geoPackage);
        var dc = new DataColumns();
        dc.table_name = 'FEATURESriversds';
        dc.column_name = 'test';
        dc.name = 'Test Name';
        dc.title = 'Test';
        dc.description = 'Test Description';
        dc.mime_type = 'text/html';
        dc.constraint_name = 'test constraint';
        var result = dao.create(dc);
        should.exist(result);
        try {
            for (var _b = __values(dao.queryByConstraintName('test constraint')), _c = _b.next(); !_c.done; _c = _b.next()) {
                var dataColumn = _c.value;
                dataColumn.should.be.deep.equal({
                    table_name: 'FEATURESriversds',
                    column_name: 'test',
                    name: 'Test Name',
                    title: 'Test',
                    description: 'Test Description',
                    mime_type: 'text/html',
                    constraint_name: 'test constraint'
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    it('should create a data column constraint', function () {
        var tc = new _1.TableCreator(geoPackage);
        return tc.createDataColumnConstraints()
            .then(function () {
            var e_2, _a;
            var dao = new dataColumnConstraintsDao_1.DataColumnConstraintsDao(geoPackage);
            var dc = new DataColumnConstraints();
            dc.constraint_name = 'test constraint';
            dc.constraint_type = 'range';
            dc.value = 'NULL';
            dc.min = 5;
            dc.min_is_inclusive = true;
            dc.max = 6;
            dc.max_is_inclusive = true;
            dc.description = 'constraint description';
            var resutl = dao.create(dc);
            try {
                for (var _b = __values(dao.queryByConstraintName('test constraint')), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var dataColumnConstraint = _c.value;
                    dataColumnConstraint.should.be.deep.equal({
                        constraint_name: 'test constraint',
                        constraint_type: 'range',
                        value: 'NULL',
                        min: 5,
                        min_is_inclusive: 1,
                        max: 6,
                        max_is_inclusive: 1,
                        description: 'constraint description'
                    });
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    });
    it('should create a data column constraint and query unique', function () {
        var tc = new _1.TableCreator(geoPackage);
        return tc.createDataColumnConstraints()
            .then(function () {
            var dao = new dataColumnConstraintsDao_1.DataColumnConstraintsDao(geoPackage);
            var dc = new DataColumnConstraints();
            dc.constraint_name = 'test constraint';
            dc.constraint_type = 'range';
            dc.value = 'NULL';
            dc.min = 5;
            dc.min_is_inclusive = true;
            dc.max = 6;
            dc.max_is_inclusive = true;
            dc.description = 'constraint description';
            var result = dao.create(dc);
            var dataColumnConstraint = dao.queryUnique('test constraint', 'range', 'NULL');
            dataColumnConstraint.should.be.deep.equal({
                constraint_name: 'test constraint',
                constraint_type: 'range',
                value: 'NULL',
                min: 5,
                min_is_inclusive: 1,
                max: 6,
                max_is_inclusive: 1,
                description: 'constraint description'
            });
        });
    });
});
//# sourceMappingURL=testDataColumns.js.map