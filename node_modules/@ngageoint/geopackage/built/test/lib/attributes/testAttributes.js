"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("../../../.");
var testSetup_1 = __importDefault(require("../../fixtures/testSetup"));
var dataColumnsDao_1 = require("../../../lib/dataColumns/dataColumnsDao");
var attributeDao_1 = require("../../../lib/attributes/attributeDao");
var attributeTableReader_1 = require("../../../lib/attributes/attributeTableReader");
var userTableReader_1 = require("../../../lib/user/userTableReader");
var attributeTable_1 = require("../../../lib/attributes/attributeTable");
var dataTypes_1 = require("../../../lib/db/dataTypes");
var contents_1 = require("../../../lib/core/contents/contents");
// var GeoPackageAPI = require('../../../.')
// var testSetup = require('../../fixtures/testSetup')
var Verification = require('../../fixtures/verification'), DataColumns = require('../../../lib/dataColumns/dataColumns').DataColumns, UserColumn = require('../../../lib/user/userColumn').UserColumn;
describe('GeoPackage Attribute table create tests', function () {
    var testGeoPackage;
    var tableName = 'test_attributes.test';
    var geopackage;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createTmpGeoPackage()];
                    case 1:
                        created = _a.sent();
                        testGeoPackage = created.path;
                        geopackage = created.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testGeoPackage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create an attribute table', function () {
        return __awaiter(this, void 0, void 0, function () {
            var columns, contentsVerified, attributesTableExists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage.hasAttributeTable(tableName).should.be.equal(false);
                        columns = [];
                        columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
                        columns.push(UserColumn.createColumn(6, 'test_text_limited.test', dataTypes_1.DataTypes.TEXT, false, null, 5));
                        columns.push(UserColumn.createColumn(7, 'test_blob_limited.test', dataTypes_1.DataTypes.BLOB, false, null, 7));
                        columns.push(UserColumn.createColumn(1, 'test_text.test', dataTypes_1.DataTypes.TEXT, false, ""));
                        columns.push(UserColumn.createColumn(2, 'test_real.test', dataTypes_1.DataTypes.REAL, false, null));
                        columns.push(UserColumn.createColumn(3, 'test_boolean.test', dataTypes_1.DataTypes.BOOLEAN, false, null));
                        columns.push(UserColumn.createColumn(4, 'test_blob.test', dataTypes_1.DataTypes.BLOB, false, null));
                        columns.push(UserColumn.createColumn(5, 'test_integer.test', dataTypes_1.DataTypes.INTEGER, false, ""));
                        return [4 /*yield*/, geopackage.createAttributeTable(tableName, columns)];
                    case 1:
                        _a.sent();
                        contentsVerified = Verification.verifyContentsForTable(geopackage, tableName);
                        contentsVerified.should.be.equal(true);
                        attributesTableExists = Verification.verifyTableExists(geopackage, tableName);
                        attributesTableExists.should.be.equal(true);
                        geopackage.hasAttributeTable(tableName).should.be.equal(true);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create an attribute table from properties', function () {
        var properties = [];
        properties.push({
            name: 'Name',
            dataType: dataTypes_1.DataTypes.nameFromType(dataTypes_1.DataTypes.TEXT),
            dataColumn: new DataColumns({
                table_name: 'NewTable',
                column_name: 'Name',
                name: 'The Name',
                title: 'The Title',
                description: 'Description',
                mime_type: 'text'
            })
        });
        properties.push({
            name: 'Number',
            dataType: dataTypes_1.DataTypes.nameFromType(dataTypes_1.DataTypes.INTEGER)
        });
        _1.GeoPackage.createAttributeTable(geopackage, 'NewTable', properties)
            .then(function () {
            var reader = new attributeTableReader_1.AttributeTableReader('NewTable');
            var result = reader.readTable(geopackage.connection);
            var columns = result.columns;
            var plainObject = JSON.parse(JSON.stringify(columns));
            plainObject.should.deep.include.members([{
                    index: 0,
                    name: 'id',
                    dataType: 5,
                    notNull: true,
                    primaryKey: true
                },
                { index: 1,
                    name: 'Name',
                    dataType: 9,
                    notNull: false,
                    primaryKey: false },
                { index: 2,
                    name: 'Number',
                    dataType: 5,
                    notNull: false,
                    primaryKey: false }]);
            var dc = new dataColumnsDao_1.DataColumnsDao(geopackage);
            var dataColumn = dc.getDataColumns('NewTable', 'Name');
            dataColumn.should.be.deep.equal({
                table_name: 'NewTable',
                column_name: 'Name',
                name: 'The Name',
                title: 'The Title',
                description: 'Description',
                mime_type: 'text',
                constraint_name: null
            });
        });
    });
    it('should create a media table from properties', function () {
        var properties = [];
        properties.push({
            name: 'Name',
            dataType: dataTypes_1.DataTypes.nameFromType(dataTypes_1.DataTypes.TEXT)
        });
        properties.push({
            name: 'Number',
            dataType: dataTypes_1.DataTypes.nameFromType(dataTypes_1.DataTypes.INTEGER)
        });
        var dao = _1.GeoPackage.createMediaTable(geopackage, 'NewTable', properties);
        var reader = new userTableReader_1.UserTableReader('NewTable');
        var result = reader.readTable(geopackage.connection);
        var columns = result.columns;
        var plainObject = JSON.parse(JSON.stringify(columns));
        plainObject.should.deep.include.members([{
                index: 0,
                name: 'id',
                dataType: 5,
                notNull: true,
                primaryKey: true
            },
            { index: 1,
                name: 'data',
                dataType: 10,
                notNull: true,
                primaryKey: false },
            { index: 2,
                name: 'content_type',
                dataType: 9,
                notNull: true,
                primaryKey: false },
            { index: 3,
                name: 'Name',
                dataType: 9,
                notNull: false,
                primaryKey: false },
            { index: 4,
                name: 'Number',
                dataType: 5,
                notNull: false,
                primaryKey: false }]);
    });
    it('should create a simple attribute table from properties', function () {
        var properties = [];
        properties.push({
            name: 'Name',
            dataType: dataTypes_1.DataTypes.nameFromType(dataTypes_1.DataTypes.TEXT)
        });
        properties.push({
            name: 'Number',
            dataType: dataTypes_1.DataTypes.nameFromType(dataTypes_1.DataTypes.INTEGER)
        });
        var dao = _1.GeoPackage.createSimpleAttributesTable(geopackage, 'NewTable', properties);
        var reader = new attributeTableReader_1.AttributeTableReader('NewTable');
        var result = reader.readTable(geopackage.connection);
        var columns = result.columns;
        var plainObject = JSON.parse(JSON.stringify(columns));
        plainObject.should.deep.include.members([{
                index: 0,
                name: 'id',
                dataType: 5,
                notNull: true,
                primaryKey: true
            },
            { index: 1,
                name: 'Name',
                dataType: 9,
                notNull: true,
                primaryKey: false },
            { index: 2,
                name: 'Number',
                dataType: 5,
                notNull: true,
                primaryKey: false }]);
    });
    it('should not allow two primary key columns', function () {
        var columns = [];
        columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
        columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(1, 'idagain'));
        (function () {
            new attributeTable_1.AttributeTable(tableName, columns);
        }).should.throw();
    });
    it('should not allow missing column indexes', function () {
        var columns = [];
        columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(1, 'id'));
        columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(2, 'idagain'));
        (function () {
            new attributeTable_1.AttributeTable(tableName, columns);
        }).should.throw();
    });
    it('should fail to create an attribute table with an incorrect contents type', function () {
        var columns = [];
        columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
        columns.push(UserColumn.createColumn(6, 'test_text_limited.test', dataTypes_1.DataTypes.TEXT, false, null, 5));
        columns.push(UserColumn.createColumn(7, 'test_blob_limited.test', dataTypes_1.DataTypes.BLOB, false, null, 7));
        columns.push(UserColumn.createColumn(1, 'test_text.test', dataTypes_1.DataTypes.TEXT, false, ""));
        columns.push(UserColumn.createColumn(2, 'test_real.test', dataTypes_1.DataTypes.REAL, false, null));
        columns.push(UserColumn.createColumn(3, 'test_boolean.test', dataTypes_1.DataTypes.BOOLEAN, false, null));
        columns.push(UserColumn.createColumn(4, 'test_blob.test', dataTypes_1.DataTypes.BLOB, false, null));
        columns.push(UserColumn.createColumn(5, 'test_integer.test', dataTypes_1.DataTypes.INTEGER, false, ""));
        var table = new attributeTable_1.AttributeTable(geopackage.connection, columns);
        (function () {
            var contents = new contents_1.Contents();
            contents.data_type = 'invalid';
            table.setContents(contents);
        }).should.throw();
    });
    it('should fail to create an attribute dao with no contents', function () {
        var columns = [];
        columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
        columns.push(UserColumn.createColumn(6, 'test_text_limited.test', dataTypes_1.DataTypes.TEXT, false, null, 5));
        columns.push(UserColumn.createColumn(7, 'test_blob_limited.test', dataTypes_1.DataTypes.BLOB, false, null, 7));
        columns.push(UserColumn.createColumn(1, 'test_text.test', dataTypes_1.DataTypes.TEXT, false, ""));
        columns.push(UserColumn.createColumn(2, 'test_real.test', dataTypes_1.DataTypes.REAL, false, null));
        columns.push(UserColumn.createColumn(3, 'test_boolean.test', dataTypes_1.DataTypes.BOOLEAN, false, null));
        columns.push(UserColumn.createColumn(4, 'test_blob.test', dataTypes_1.DataTypes.BLOB, false, null));
        columns.push(UserColumn.createColumn(5, 'test_integer.test', dataTypes_1.DataTypes.INTEGER, false, ""));
        var table = new attributeTable_1.AttributeTable(geopackage.connection, columns);
        (function () {
            new attributeDao_1.AttributeDao(geopackage, table);
        }).should.throw();
    });
    it('should create a attribute table and read the information about it', function () {
        var columns = [];
        columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
        columns.push(UserColumn.createColumn(6, 'test_text_limited.test', dataTypes_1.DataTypes.TEXT, false, null, 5));
        columns.push(UserColumn.createColumn(7, 'test_blob_limited.test', dataTypes_1.DataTypes.BLOB, false, null, 7));
        columns.push(UserColumn.createColumn(1, 'test_text.test', dataTypes_1.DataTypes.TEXT, false, "default"));
        columns.push(UserColumn.createColumn(2, 'test_real.test', dataTypes_1.DataTypes.REAL, false, null));
        columns.push(UserColumn.createColumn(3, 'test_boolean.test', dataTypes_1.DataTypes.BOOLEAN, false, null));
        columns.push(UserColumn.createColumn(4, 'test_blob.test', dataTypes_1.DataTypes.BLOB, false, null));
        columns.push(UserColumn.createColumn(5, 'test_integer.test', dataTypes_1.DataTypes.INTEGER, false, 5));
        var dc = new DataColumns();
        dc.table_name = 'test_attributes.test';
        dc.column_name = 'test_text_limited.test';
        dc.name = 'Test Name';
        dc.title = 'Test';
        dc.description = 'Test Description';
        dc.mime_type = 'text/html';
        dc.constraint_name = 'test constraint';
        return geopackage.createAttributeTable(tableName, columns, [dc])
            .then(function () {
            var reader = new attributeTableReader_1.AttributeTableReader(tableName);
            var result = reader.readTable(geopackage.connection);
            var columns = result.columns;
            var plainObject = JSON.parse(JSON.stringify(columns));
            plainObject.should.deep.include.members([{ index: 0,
                    name: 'id',
                    dataType: 5,
                    notNull: true,
                    primaryKey: true },
                { index: 1,
                    name: 'test_text.test',
                    dataType: 9,
                    notNull: false,
                    defaultValue: "\'default\'",
                    primaryKey: false },
                { index: 2,
                    name: 'test_real.test',
                    dataType: 8,
                    notNull: false,
                    primaryKey: false },
                { index: 3,
                    name: 'test_boolean.test',
                    dataType: 0,
                    notNull: false,
                    primaryKey: false },
                { index: 4,
                    name: 'test_blob.test',
                    dataType: 10,
                    notNull: false,
                    primaryKey: false },
                { index: 5,
                    name: 'test_integer.test',
                    dataType: 5,
                    notNull: false,
                    defaultValue: '5',
                    primaryKey: false },
                { index: 6,
                    name: 'test_text_limited.test',
                    dataType: 9,
                    max: 5,
                    notNull: false,
                    primaryKey: false },
                { index: 7,
                    name: 'test_blob_limited.test',
                    dataType: 10,
                    max: 7,
                    notNull: false,
                    primaryKey: false }]);
            var dao = new dataColumnsDao_1.DataColumnsDao(geopackage);
            var dataColumn = dao.getDataColumns('test_attributes.test', 'test_text_limited.test');
            dataColumn.should.be.deep.equal({
                table_name: 'test_attributes.test',
                column_name: 'test_text_limited.test',
                name: 'Test Name',
                title: 'Test',
                description: 'Test Description',
                mime_type: 'text/html',
                constraint_name: 'test constraint'
            });
        });
    });
    describe('GeoPackage attribute CRUD tests', function (done) {
        beforeEach(function () {
            var columns = [];
            columns.push(UserColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
            columns.push(UserColumn.createColumn(6, 'test_text_limited', dataTypes_1.DataTypes.TEXT, false, null, 5));
            columns.push(UserColumn.createColumn(7, 'test_blob_limited', dataTypes_1.DataTypes.BLOB, false, null, 7));
            columns.push(UserColumn.createColumn(10, 'test_boolean2', dataTypes_1.DataTypes.BOOLEAN, false, null));
            columns.push(UserColumn.createColumn(1, 'test_text.test', dataTypes_1.DataTypes.TEXT, false, ""));
            columns.push(UserColumn.createColumn(2, 'test_real', dataTypes_1.DataTypes.REAL, false, null));
            columns.push(UserColumn.createColumn(3, 'test_boolean', dataTypes_1.DataTypes.BOOLEAN, false, null));
            columns.push(UserColumn.createColumn(4, 'test_blob', dataTypes_1.DataTypes.BLOB, false, null));
            columns.push(UserColumn.createColumn(5, 'test_integer', dataTypes_1.DataTypes.INTEGER, false, ""));
            columns.push(UserColumn.createColumn(8, 'test space', dataTypes_1.DataTypes.TEXT, false, ""));
            columns.push(UserColumn.createColumn(9, 'test-dash', dataTypes_1.DataTypes.TEXT, false, ""));
            return geopackage.createAttributeTable(tableName, columns)
                .then(function (result) {
                var contentsVerified = Verification.verifyContentsForTable(geopackage, tableName);
                contentsVerified.should.be.equal(true);
                var attributesTableExists = Verification.verifyTableExists(geopackage, tableName);
                attributesTableExists.should.be.equal(true);
            });
        });
        it('should create an attribute', function () {
            var attributeDao = geopackage.getAttributeDaoWithTableName(tableName);
            var attributeRow = attributeDao.newRow();
            attributeRow.setValueWithColumnName('test_text.test', 'hello');
            attributeRow.setValueWithColumnName('test_real', 3.0);
            attributeRow.setValueWithColumnName('test_boolean', true);
            attributeRow.setValueWithColumnName('test_boolean2', false);
            attributeRow.setValueWithColumnName('test_blob', Buffer.from('test'));
            attributeRow.setValueWithColumnName('test_integer', 5);
            attributeRow.setValueWithColumnName('test_text_limited', 'testt');
            attributeRow.setValueWithColumnName('test_blob_limited', Buffer.from('testtes'));
            attributeRow.setValueWithColumnName('test space', 'space space');
            attributeRow.setValueWithColumnName('test-dash', 'dash-dash');
            var result = attributeDao.create(attributeRow);
            var count = attributeDao.getCount();
            count.should.be.equal(1);
            var rows = attributeDao.queryForAll();
            var ar = attributeDao.createObject(rows[0]);
            ar.getValueWithColumnName('test_text.test').should.be.equal('hello');
            ar.getValueWithColumnName('test_real').should.be.equal(3.0);
            ar.getValueWithColumnName('test_boolean').should.be.equal(true);
            ar.getValueWithColumnName('test_integer').should.be.equal(5);
            ar.getValueWithColumnName('test_blob').toString().should.be.equal('test');
            ar.getValueWithColumnName('test_text_limited').should.be.equal('testt');
            ar.getValueWithColumnName('test_blob_limited').toString().should.be.equal('testtes');
            ar.getValueWithColumnName('test space').toString().should.be.equal('space space');
            ar.getValueWithColumnName('test-dash').toString().should.be.equal('dash-dash');
        });
        describe('delete attribute tests', function (done) {
            var attributeDao;
            beforeEach(function () {
                attributeDao = geopackage.getAttributeDaoWithTableName(tableName);
                var attributeRow = attributeDao.createObject();
                attributeRow.setValueWithColumnName('test_text.test', 'hello');
                attributeRow.setValueWithColumnName('test_real', 3.0);
                attributeRow.setValueWithColumnName('test_boolean', attributeRow.toObjectValue(3, 1));
                attributeRow.setValueWithColumnName('test_boolean2', attributeRow.toObjectValue(10, 0));
                attributeRow.setValueWithColumnName('test_blob', Buffer.from('test'));
                attributeRow.setValueWithColumnName('test_integer', 5);
                attributeRow.setValueWithColumnName('test_text_limited', 'testt');
                attributeRow.setValueWithColumnName('test_blob_limited', Buffer.from('testtes'));
                attributeRow.setValueWithColumnName('test space', 'space space');
                attributeRow.setValueWithColumnName('test-dash', 'dash-dash');
                var result = attributeDao.create(attributeRow);
                var count = attributeDao.getCount();
                count.should.be.equal(1);
                var rows = attributeDao.queryForAll();
                var ar = attributeDao.createObject(rows[0]);
                ar.getValueWithColumnName('test_text.test').should.be.equal('hello');
                ar.getValueWithColumnName('test_real').should.be.equal(3.0);
                ar.getValueWithColumnName('test_boolean').should.be.equal(true);
                ar.getValueWithColumnName('test_boolean2').should.be.equal(false);
                ar.getValueWithColumnName('test_integer').should.be.equal(5);
                ar.getValueWithColumnName('test_blob').toString().should.be.equal('test');
                ar.getValueWithColumnName('test_text_limited').should.be.equal('testt');
                ar.getValueWithColumnName('test_blob_limited').toString().should.be.equal('testtes');
                ar.getValueWithColumnName('test space').toString().should.be.equal('space space');
                ar.getValueWithColumnName('test-dash').toString().should.be.equal('dash-dash');
            });
            it('should delete the attribute', function () {
                var count = attributeDao.getCount();
                count.should.be.equal(1);
                var rows = attributeDao.queryForAll();
                var ar = attributeDao.createObject(rows[0]);
                var result = attributeDao.delete(ar);
                var count = attributeDao.getCount();
                count.should.be.equal(0);
            });
        });
    });
});
//# sourceMappingURL=testAttributes.js.map