"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("../../.");
var testSetup_1 = __importDefault(require("../fixtures/testSetup"));
var FeatureColumn = require('../../lib/features/user/featureColumn').FeatureColumn, DataColumns = require('../../lib/dataColumns/dataColumns').DataColumns, DataColumnsDao = require('../../lib/dataColumns/dataColumnsDao').DataColumnsDao, Verification = require('../fixtures/verification'), FeatureTable = require('../../lib/features/user/featureTable').FeatureTable, SetupFeatureTable = require('../fixtures/setupFeatureTable'), BoundingBox = require('../../lib/boundingBox').BoundingBox, DataTypes = require('../../lib/db/dataTypes').DataTypes, GeometryData = require('../../lib/geom/geometryData').GeometryData, FeatureTableReader = require('../../lib/features/user/featureTableReader').FeatureTableReader
// , testSetup = require('../fixtures/testSetup')
, should = require('chai').should(), wkb = require('../../lib/wkb/index').WKB, wkx = require('wkx'), path = require('path');
describe('GeoPackage Feature table create tests', function () {
    var testGeoPackage;
    var tableName = 'test_features.test';
    var geopackage;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createTmpGeoPackage()];
                    case 1:
                        created = _a.sent();
                        testGeoPackage = created.path;
                        geopackage = created.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testGeoPackage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create a feature table', function () {
        var geometryColumns = SetupFeatureTable.buildGeometryColumns(tableName, 'geom.test', wkb.typeMap.wkt.Point);
        var boundingBox = new BoundingBox(-180, 180, -80, 80);
        var columns = [];
        columns.push(FeatureColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
        columns.push(FeatureColumn.createColumn(7, 'test_text_limited.test', DataTypes.TEXT, false, null, 5));
        columns.push(FeatureColumn.createColumn(8, 'test_blob_limited.test', DataTypes.BLOB, false, null, 7));
        columns.push(FeatureColumn.createGeometryColumn(1, 'geom.test', wkb.typeMap.wkt.Point, false, null));
        columns.push(FeatureColumn.createColumn(2, 'test_text.test', DataTypes.TEXT, false, ""));
        columns.push(FeatureColumn.createColumn(3, 'test_real.test', DataTypes.REAL, false, null));
        columns.push(FeatureColumn.createColumn(4, 'test_boolean.test', DataTypes.BOOLEAN, false, null));
        columns.push(FeatureColumn.createColumn(5, 'test_blob.test', DataTypes.BLOB, false, null));
        columns.push(FeatureColumn.createColumn(6, 'test_integer.test', DataTypes.INTEGER, false, ""));
        geopackage.createFeatureTableWithGeometryColumns(geometryColumns, boundingBox, 4326, columns)
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyGeometryColumns(geopackage).should.be.equal(true);
            Verification.verifyTableExists(geopackage, tableName).should.be.equal(true);
            Verification.verifyContentsForTable(geopackage, tableName).should.be.equal(true);
            Verification.verifyGeometryColumnsForTable(geopackage, tableName).should.be.equal(true);
        });
    });
    it('should not create a feature table with two geometry columns', function () {
        var geometryColumns = SetupFeatureTable.buildGeometryColumns(tableName, 'geom.test', wkb.typeMap.wkt.Point);
        var boundingBox = new BoundingBox(-180, 180, -80, 80);
        var columns = [];
        columns.push(FeatureColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
        columns.push(FeatureColumn.createGeometryColumn(1, 'geom.test', wkb.typeMap.wkt.Point, false, null));
        columns.push(FeatureColumn.createGeometryColumn(2, 'geom2.test', wkb.typeMap.wkt.Point, false, null));
        (function () {
            new FeatureTable(tableName, columns);
        }).should.throw();
    });
    it('should create a feature table from properties', function () {
        var properties = [];
        properties.push({
            name: 'Name',
            dataType: DataTypes.nameFromType(DataTypes.TEXT)
        });
        properties.push({
            name: 'Number',
            dataType: DataTypes.nameFromType(DataTypes.INTEGER)
        });
        _1.GeoPackage.createFeatureTable(geopackage, 'NewTable', properties)
            .then(function () {
            var reader = new FeatureTableReader('NewTable');
            var result = reader.readFeatureTable(geopackage);
            var columns = result.columns;
            var plainObject = JSON.parse(JSON.stringify(columns));
            plainObject.should.deep.include.members([{
                    index: 0,
                    name: 'id',
                    dataType: 5,
                    notNull: true,
                    primaryKey: true
                },
                { index: 1,
                    name: 'geometry',
                    notNull: false,
                    primaryKey: false,
                    geometryType: 7 },
                { index: 2,
                    name: 'Name',
                    dataType: 9,
                    notNull: false,
                    primaryKey: false },
                { index: 3,
                    name: 'Number',
                    dataType: 5,
                    notNull: false,
                    primaryKey: false }]);
        });
    });
    it('should create a feature table and read the information about it', function () {
        var geometryColumns = SetupFeatureTable.buildGeometryColumns(tableName, 'geom.test', wkb.typeMap.wkt.Point);
        var boundingBox = new BoundingBox(-180, 180, -80, 80);
        var columns = [];
        columns.push(FeatureColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
        columns.push(FeatureColumn.createColumn(7, 'test_text_limited.test', DataTypes.TEXT, false, null, 5));
        columns.push(FeatureColumn.createColumn(8, 'test_blob_limited.test', DataTypes.BLOB, false, null, 7));
        columns.push(FeatureColumn.createGeometryColumn(1, 'geom.test', wkb.typeMap.wkt.Point, false, null));
        columns.push(FeatureColumn.createColumn(2, 'test_text.test', DataTypes.TEXT, false, "default"));
        columns.push(FeatureColumn.createColumn(3, 'test_real.test', DataTypes.REAL, false, null));
        columns.push(FeatureColumn.createColumn(4, 'test_boolean.test', DataTypes.BOOLEAN, false, null));
        columns.push(FeatureColumn.createColumn(5, 'test_blob.test', DataTypes.BLOB, false, null));
        columns.push(FeatureColumn.createColumn(6, 'test_integer.test', DataTypes.INTEGER, false, 5));
        var dc = new DataColumns();
        dc.table_name = 'test_features.test';
        dc.column_name = 'test_text_limited.test';
        dc.name = 'Test Name';
        dc.title = 'Test';
        dc.description = 'Test Description';
        dc.mime_type = 'text/html';
        dc.constraint_name = 'test constraint';
        return geopackage.createFeatureTableWithGeometryColumnsAndDataColumns(geometryColumns, boundingBox, 4326, columns, [dc])
            .then(function () {
            var reader = new FeatureTableReader(tableName);
            var result = reader.readFeatureTable(geopackage);
            var columns = result.columns;
            var plainObject = JSON.parse(JSON.stringify(columns));
            plainObject.should.deep.include.members([{ index: 0,
                    name: 'id',
                    dataType: 5,
                    notNull: true,
                    primaryKey: true },
                { index: 1,
                    name: 'geom.test',
                    notNull: false,
                    primaryKey: false,
                    geometryType: 7 },
                { index: 2,
                    name: 'test_text.test',
                    dataType: 9,
                    notNull: false,
                    defaultValue: "\'default\'",
                    primaryKey: false },
                { index: 3,
                    name: 'test_real.test',
                    dataType: 8,
                    notNull: false,
                    primaryKey: false },
                { index: 4,
                    name: 'test_boolean.test',
                    dataType: 0,
                    notNull: false,
                    primaryKey: false },
                { index: 5,
                    name: 'test_blob.test',
                    dataType: 10,
                    notNull: false,
                    primaryKey: false },
                { index: 6,
                    name: 'test_integer.test',
                    dataType: 5,
                    notNull: false,
                    defaultValue: '5',
                    primaryKey: false },
                { index: 7,
                    name: 'test_text_limited.test',
                    dataType: 9,
                    max: 5,
                    notNull: false,
                    primaryKey: false },
                { index: 8,
                    name: 'test_blob_limited.test',
                    dataType: 10,
                    max: 7,
                    notNull: false,
                    primaryKey: false }]);
            var dao = new DataColumnsDao(geopackage);
            var dataColumn = dao.getDataColumns('test_features.test', 'test_text_limited.test');
            dataColumn.should.be.deep.equal({
                table_name: 'test_features.test',
                column_name: 'test_text_limited.test',
                name: 'Test Name',
                title: 'Test',
                description: 'Test Description',
                mime_type: 'text/html',
                constraint_name: 'test constraint'
            });
        });
    });
    describe('GeoPackage feature CRUD tests', function (done) {
        beforeEach(function () {
            var geometryColumns = SetupFeatureTable.buildGeometryColumns(tableName, 'geom', wkb.typeMap.wkt.Point);
            var boundingBox = new BoundingBox(-180, 180, -80, 80);
            var columns = [];
            columns.push(FeatureColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
            columns.push(FeatureColumn.createColumn(7, 'test_text_limited', DataTypes.TEXT, false, null, 5));
            columns.push(FeatureColumn.createColumn(8, 'test_blob_limited', DataTypes.BLOB, false, null, 7));
            columns.push(FeatureColumn.createGeometryColumn(1, 'geom', wkb.typeMap.wkt.Point, false, null));
            columns.push(FeatureColumn.createColumn(2, 'test_text.test', DataTypes.TEXT, false, ""));
            columns.push(FeatureColumn.createColumn(3, 'test_real', DataTypes.REAL, false, null));
            columns.push(FeatureColumn.createColumn(4, 'test_boolean', DataTypes.BOOLEAN, false, null));
            columns.push(FeatureColumn.createColumn(5, 'test_blob', DataTypes.BLOB, false, null));
            columns.push(FeatureColumn.createColumn(6, 'test_integer', DataTypes.INTEGER, false, ""));
            columns.push(FeatureColumn.createColumn(9, 'test space', DataTypes.TEXT, false, ""));
            columns.push(FeatureColumn.createColumn(10, 'test-dash', DataTypes.TEXT, false, ""));
            return geopackage.createFeatureTableWithGeometryColumns(geometryColumns, boundingBox, 4326, columns)
                .then(function (result) {
                var verified = Verification.verifyGeometryColumns(geopackage)
                    && Verification.verifyTableExists(geopackage, tableName)
                    && Verification.verifyContentsForTable(geopackage, tableName)
                    && Verification.verifyGeometryColumnsForTable(geopackage, tableName);
                verified.should.be.equal(true);
            });
        });
        it('should create a feature', function () {
            var featureDao = geopackage.getFeatureDao(tableName);
            var featureRow = featureDao.newRow();
            var geometryData = new GeometryData();
            geometryData.setSrsId(4326);
            var point = new wkx.Point(1, 2);
            geometryData.setGeometry(point);
            featureRow.setGeometry(geometryData);
            featureRow.setValueWithColumnName('test_text.test', 'hello');
            featureRow.setValueWithColumnName('test_real', 3.0);
            featureRow.setValueWithColumnName('test_boolean', true);
            featureRow.setValueWithColumnName('test_blob', Buffer.from('test'));
            featureRow.setValueWithColumnName('test_integer', 5);
            featureRow.setValueWithColumnName('test_text_limited', 'testt');
            featureRow.setValueWithColumnName('test_blob_limited', Buffer.from('testtes'));
            featureRow.setValueWithColumnName('test space', 'space space');
            featureRow.setValueWithColumnName('test-dash', 'dash-dash');
            var result = featureDao.create(featureRow);
            var count = featureDao.getCount();
            count.should.be.equal(1);
            var rows = featureDao.queryForAll();
            var fr = featureDao.getRow(rows[0]);
            var geom = fr.getGeometry();
            geom.geometry.x.should.be.equal(1);
            geom.geometry.y.should.be.equal(2);
            fr.getValueWithColumnName('test_text.test').should.be.equal('hello');
            fr.getValueWithColumnName('test_real').should.be.equal(3.0);
            fr.getValueWithColumnName('test_boolean').should.be.equal(true);
            fr.getValueWithColumnName('test_integer').should.be.equal(5);
            fr.getValueWithColumnName('test_blob').toString().should.be.equal('test');
            fr.getValueWithColumnName('test_text_limited').should.be.equal('testt');
            fr.getValueWithColumnName('test_blob_limited').toString().should.be.equal('testtes');
            fr.getValueWithColumnName('test space').toString().should.be.equal('space space');
            fr.getValueWithColumnName('test-dash').toString().should.be.equal('dash-dash');
        });
        describe('delete feature tests', function (done) {
            var featureDao;
            beforeEach(function () {
                featureDao = geopackage.getFeatureDao(tableName);
                var featureRow = featureDao.newRow();
                var geometryData = new GeometryData();
                geometryData.setSrsId(4326);
                var point = new wkx.Point(1, 2);
                geometryData.setGeometry(point);
                featureRow.setGeometry(geometryData);
                featureRow.setValueWithColumnName('test_text.test', 'hello');
                featureRow.setValueWithColumnName('test_real', 3.0);
                featureRow.setValueWithColumnName('test_boolean', true);
                featureRow.setValueWithColumnName('test_blob', Buffer.from('test'));
                featureRow.setValueWithColumnName('test_integer', 5);
                featureRow.setValueWithColumnName('test_text_limited', 'testt');
                featureRow.setValueWithColumnName('test_blob_limited', Buffer.from('testtes'));
                var result = featureDao.create(featureRow);
                var count = featureDao.getCount();
                count.should.be.equal(1);
                var rows = featureDao.queryForAll();
                var fr = featureDao.getRow(rows[0]);
                var geom = fr.getGeometry();
                geom.geometry.x.should.be.equal(1);
                geom.geometry.y.should.be.equal(2);
                fr.getValueWithColumnName('test_text.test').should.be.equal('hello');
                fr.getValueWithColumnName('test_real').should.be.equal(3.0);
                fr.getValueWithColumnName('test_boolean').should.be.equal(true);
                fr.getValueWithColumnName('test_integer').should.be.equal(5);
                fr.getValueWithColumnName('test_blob').toString().should.be.equal('test');
                fr.getValueWithColumnName('test_text_limited').should.be.equal('testt');
                fr.getValueWithColumnName('test_blob_limited').toString().should.be.equal('testtes');
            });
            it('should delete the feature', function () {
                var count = featureDao.getCount();
                count.should.be.equal(1);
                var rows = featureDao.queryForAll();
                var fr = featureDao.getRow(rows[0]);
                var result = featureDao.delete(fr);
                var count = featureDao.getCount();
                count.should.be.equal(0);
            });
        });
    });
});
//# sourceMappingURL=testFeatureCreate.js.map