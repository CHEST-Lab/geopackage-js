"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var userTable_1 = require("../../../../lib/user/userTable");
var userColumn_1 = require("../../../../lib/user/userColumn");
var userRow_1 = require("../../../../lib/user/userRow");
var dataTypes_1 = require("../../../../lib/db/dataTypes");
var DublinCoreMetadata = require('../../../../lib/extension/relatedTables/dublinCoreMetadata').DublinCoreMetadata, DublinCoreType = require('../../../../lib/extension/relatedTables/dublinCoreType').DublinCoreType, should = require('chai').should();
describe('Dublin Core tests', function () {
    it('from name', function () {
        DublinCoreType.fromName('format').should.be.equal(DublinCoreType.FORMAT);
        DublinCoreType.fromName('identifier').should.be.equal(DublinCoreType.IDENTIFIER);
        DublinCoreType.fromName('date').should.be.equal(DublinCoreType.DATE);
        DublinCoreType.fromName('source').should.be.equal(DublinCoreType.SOURCE);
        DublinCoreType.fromName('title').should.be.equal(DublinCoreType.TITLE);
        DublinCoreType.fromName('description').should.be.equal(DublinCoreType.DESCRIPTION);
        DublinCoreType.fromName('content_type').should.be.equal(DublinCoreType.FORMAT);
        DublinCoreType.fromName('id').should.be.equal(DublinCoreType.IDENTIFIER);
    });
    it('has column', function () {
        var MockUserTable = /** @class */ (function (_super) {
            __extends(MockUserTable, _super);
            function MockUserTable() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserTable.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return false;
                }
            };
            return MockUserTable;
        }(userTable_1.UserTable));
        var fakeTable = new MockUserTable('table', []);
        DublinCoreMetadata.hasColumn(fakeTable, DublinCoreType.IDENTIFIER).should.be.equal(true);
        DublinCoreMetadata.hasColumn(fakeTable, DublinCoreType.FORMAT).should.be.equal(false);
    });
    it('has synonym column', function () {
        var MockUserTable = /** @class */ (function (_super) {
            __extends(MockUserTable, _super);
            function MockUserTable() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserTable.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type' || name === 'source').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return true;
                }
                return false;
            };
            return MockUserTable;
        }(userTable_1.UserTable));
        var fakeTable = new MockUserTable('table', []);
        DublinCoreMetadata.hasColumn(fakeTable, DublinCoreType.IDENTIFIER).should.be.equal(true);
        DublinCoreMetadata.hasColumn(fakeTable, DublinCoreType.FORMAT).should.be.equal(true);
        DublinCoreMetadata.hasColumn(fakeTable, DublinCoreType.SOURCE).should.be.equal(false);
    });
    it('get column', function () {
        var MockUserTable = /** @class */ (function (_super) {
            __extends(MockUserTable, _super);
            function MockUserTable() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserTable.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
                if (name === 'format') {
                    return;
                }
                if (name === 'content_type') {
                    return;
                }
            };
            MockUserTable.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return false;
                }
            };
            return MockUserTable;
        }(userTable_1.UserTable));
        var fakeTable = new MockUserTable('table', []);
        should.exist(DublinCoreMetadata.getColumn(fakeTable, DublinCoreType.IDENTIFIER));
        should.not.exist(DublinCoreMetadata.getColumn(fakeTable, DublinCoreType.FORMAT));
    });
    it('get synonym column', function () {
        var MockUserTable = /** @class */ (function (_super) {
            __extends(MockUserTable, _super);
            function MockUserTable() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserTable.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type' || name === 'source').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
                if (name === 'format') {
                    return;
                }
                if (name === 'content_type') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.TEXT);
                }
                return;
            };
            MockUserTable.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type' || name === 'source').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return true;
                }
            };
            return MockUserTable;
        }(userTable_1.UserTable));
        ;
        var fakeTable = new MockUserTable('table', []);
        should.exist(DublinCoreMetadata.getColumn(fakeTable, DublinCoreType.IDENTIFIER));
        should.exist(DublinCoreMetadata.getColumn(fakeTable, DublinCoreType.FORMAT));
        should.not.exist(DublinCoreMetadata.getColumn(fakeTable, DublinCoreType.SOURCE));
    });
    it('set value', function () {
        var MockUserRow = /** @class */ (function (_super) {
            __extends(MockUserRow, _super);
            function MockUserRow() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserRow.prototype.setValueWithColumnName = function (name, value) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    value.should.be.equal('identifier');
                }
                else {
                    should.fail(name, 'identifier');
                }
            };
            MockUserRow.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
            };
            MockUserRow.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
            };
            return MockUserRow;
        }(userRow_1.UserRow));
        ;
        var MockUserTable = /** @class */ (function (_super) {
            __extends(MockUserTable, _super);
            function MockUserTable() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserTable.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type' || name === 'source').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
                if (name === 'format') {
                    return;
                }
                if (name === 'content_type') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.TEXT);
                }
                return;
            };
            MockUserTable.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type' || name === 'source').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return true;
                }
            };
            return MockUserTable;
        }(userTable_1.UserTable));
        ;
        var fakeTable = new MockUserTable('table', []);
        var fakeRow = new MockUserRow(fakeTable);
        DublinCoreMetadata.setValue(fakeRow, DublinCoreType.IDENTIFIER, 'identifier');
    });
    it('set synonym value', function () {
        var MockUserRow = /** @class */ (function (_super) {
            __extends(MockUserRow, _super);
            function MockUserRow() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserRow.prototype.setValueWithColumnName = function (name, value) {
                console.log('set value with name', name);
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'content_type') {
                    value.should.be.equal('format');
                }
                else {
                    should.fail(name, 'content_type');
                }
            };
            MockUserRow.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
                if (name === 'format') {
                    return;
                }
                if (name === 'content_type') {
                    return new userColumn_1.UserColumn(0, 'content_type', dataTypes_1.DataTypes.TEXT);
                }
            };
            MockUserRow.prototype.hasColumn = function (columnNanameme) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return true;
                }
            };
            return MockUserRow;
        }(userRow_1.UserRow));
        var MockUserTable = /** @class */ (function (_super) {
            __extends(MockUserTable, _super);
            function MockUserTable() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserTable.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type' || name === 'source').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
                if (name === 'format') {
                    return;
                }
                if (name === 'content_type') {
                    return new userColumn_1.UserColumn(0, 'content_type', dataTypes_1.DataTypes.TEXT);
                }
                return;
            };
            MockUserTable.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type' || name === 'source').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return true;
                }
            };
            return MockUserTable;
        }(userTable_1.UserTable));
        ;
        var fakeTable = new MockUserTable('table', []);
        var fakeRow = new MockUserRow(fakeTable);
        DublinCoreMetadata.setValue(fakeRow, DublinCoreType.FORMAT, 'format');
    });
    it('get value', function () {
        var MockUserRow = /** @class */ (function (_super) {
            __extends(MockUserRow, _super);
            function MockUserRow() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserRow.prototype.getValueWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return 'identifier';
                }
                else {
                    should.fail(name, 'identifier');
                }
            };
            MockUserRow.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
            };
            MockUserRow.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
            };
            return MockUserRow;
        }(userRow_1.UserRow));
        ;
        var MockUserTable = /** @class */ (function (_super) {
            __extends(MockUserTable, _super);
            function MockUserTable() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserTable.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return false;
                }
            };
            MockUserTable.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
            };
            return MockUserTable;
        }(userTable_1.UserTable));
        var fakeTable = new MockUserTable('table', []);
        var fakeRow = new MockUserRow(fakeTable);
        DublinCoreMetadata.getValue(fakeRow, DublinCoreType.IDENTIFIER).should.be.equal('identifier');
    });
    it('get synonym value', function () {
        var MockUserRow = /** @class */ (function (_super) {
            __extends(MockUserRow, _super);
            function MockUserRow() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserRow.prototype.getValueWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'format') {
                    return 'format';
                }
                else {
                    should.fail(name, 'content_type');
                }
            };
            MockUserRow.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return new userColumn_1.UserColumn(0, 'identifier', dataTypes_1.DataTypes.INTEGER);
                }
                if (name === 'format') {
                    return;
                }
                if (name === 'content_type') {
                    return new userColumn_1.UserColumn(0, 'content_type', dataTypes_1.DataTypes.TEXT);
                }
            };
            MockUserRow.prototype.hasColumn = function (name) {
                console.log('looking for column', name);
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return false;
                }
                if (name === 'content_type') {
                    return true;
                }
            };
            return MockUserRow;
        }(userRow_1.UserRow));
        ;
        var MockUserTable = /** @class */ (function (_super) {
            __extends(MockUserTable, _super);
            function MockUserTable() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            MockUserTable.prototype.hasColumn = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'identifier') {
                    return true;
                }
                if (name === 'format') {
                    return true;
                }
                if (name === 'content_type') {
                    return false;
                }
            };
            MockUserTable.prototype.getColumnWithColumnName = function (name) {
                (name === 'identifier' || name === 'format' || name === 'content_type').should.be.equal(true);
                if (name === 'format') {
                    return new userColumn_1.UserColumn(0, 'format', dataTypes_1.DataTypes.TEXT);
                }
            };
            return MockUserTable;
        }(userTable_1.UserTable));
        var fakeTable = new MockUserTable('table', []);
        var fakeRow = new MockUserRow(fakeTable);
        DublinCoreMetadata.getValue(fakeRow, DublinCoreType.FORMAT).should.be.equal('format');
    });
});
//# sourceMappingURL=testDublinCore.js.map