"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var relatedTables_1 = require("../../../../lib/extension/relatedTables");
var userMappingTable_1 = require("../../../../lib/extension/relatedTables/userMappingTable");
var DataType = require('../../../../lib/db/dataTypes').DataTypes
// , testSetup = require('../../../fixtures/testSetup')
, RelatedTablesUtils = require('./relatedTablesUtils'), should = require('chai').should(), path = require('path');
describe('Related Attributes tests', function () {
    var testGeoPackage;
    var testPath = path.join(__dirname, '..', '..', '..', 'fixtures', 'tmp');
    var geoPackage;
    var filename;
    beforeEach('create the GeoPackage connection', function () {
        return __awaiter(this, void 0, void 0, function () {
            var originalFilename, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'attributes.gpkg');
                        return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                    case 1:
                        result = _a.sent();
                        filename = result.path;
                        geoPackage = result.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach('delete the geopackage', function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geoPackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    function validateContents(attributesTable, contents) {
        should.exist(contents);
        should.exist(contents.data_type);
        'attributes'.should.be.equal(contents.data_type);
        attributesTable.table_name.should.be.equal(contents.table_name);
        should.exist(contents.last_change);
    }
    it('should create an attributes relationship', function () {
        var rte = new relatedTables_1.RelatedTablesExtension(geoPackage);
        rte.has().should.be.equal(false);
        var extendedRelationships = rte.getRelationships();
        extendedRelationships.length.should.be.equal(0);
        var attributesTables = geoPackage.getAttributesTables();
        var baseTableName = geoPackage.getAttributesTables()[0];
        var attributesDao = geoPackage.getAttributeDaoWithTableName(baseTableName);
        var additionalMappingColumns = RelatedTablesUtils.createAdditionalUserColumns(userMappingTable_1.UserMappingTable.numRequiredColumns());
        var mappingTableName = 'attributes_2_attributes';
        var userMappingTable = userMappingTable_1.UserMappingTable.create(mappingTableName, additionalMappingColumns);
        rte.has(userMappingTable.table_name).should.be.equal(false);
        userMappingTable.columnNames.length.should.be.equal(userMappingTable_1.UserMappingTable.numRequiredColumns() + additionalMappingColumns.length);
        var baseIdColumn = userMappingTable.getBaseIdColumn();
        should.exist(baseIdColumn);
        baseIdColumn.name.should.be.equal(userMappingTable_1.UserMappingTable.COLUMN_BASE_ID);
        baseIdColumn.dataType.should.be.equal(DataType.INTEGER);
        baseIdColumn.notNull.should.be.equal(true);
        baseIdColumn.primaryKey.should.be.equal(false);
        var relatedIdColumn = userMappingTable.getRelatedIdColumn();
        should.exist(relatedIdColumn);
        relatedIdColumn.name.should.be.equal(userMappingTable_1.UserMappingTable.COLUMN_RELATED_ID);
        relatedIdColumn.dataType.should.be.equal(DataType.INTEGER);
        relatedIdColumn.notNull.should.be.equal(true);
        relatedIdColumn.primaryKey.should.be.equal(false);
        rte.has(userMappingTable.table_name).should.be.equal(false);
        var relationship = relatedTables_1.RelatedTablesExtension.RelationshipBuilder()
            .setBaseTableName(baseTableName)
            .setRelatedTableName(baseTableName)
            .setUserMappingTable(userMappingTable);
        return rte.addAttributesRelationship(relationship)
            .then(function (extendedRelation) {
            var e_1, _a;
            rte.has().should.be.equal(true);
            rte.has(userMappingTable.table_name).should.be.equal(true);
            should.exist(extendedRelation);
            var relationships = rte.getRelationships();
            relationships.length.should.be.equal(1);
            geoPackage.isTable(mappingTableName).should.be.equal(true);
            'attributes'.should.be.equal(geoPackage.getTableType(baseTableName));
            geoPackage.isTableType('attributes', baseTableName);
            // Insert user mapping rows between attributes
            var userMappingDao = rte.getMappingDao(mappingTableName);
            var userMappingRow = userMappingDao.newRow();
            userMappingRow.setBaseId(4);
            userMappingRow.setRelatedId(7);
            RelatedTablesUtils.populateRow(userMappingTable, userMappingRow, userMappingTable_1.UserMappingTable.requiredColumns());
            var createdId = userMappingDao.create(userMappingRow);
            createdId.should.be.equal(1);
            userMappingDao.count().should.be.equal(1);
            userMappingRow = userMappingDao.newRow();
            userMappingRow.setBaseId(5);
            userMappingRow.setRelatedId(5);
            RelatedTablesUtils.populateRow(userMappingTable, userMappingRow, userMappingTable_1.UserMappingTable.requiredColumns());
            createdId = userMappingDao.create(userMappingRow);
            createdId.should.be.equal(2);
            userMappingDao.count().should.be.equal(2);
            // Validate the user mapping rows
            userMappingTable = userMappingDao.getTable();
            var mappingColumns = userMappingTable.columnNames;
            var userMappingRows = userMappingDao.queryForAll();
            var count = userMappingRows.length;
            count.should.be.equal(2);
            var manualCount = 0;
            for (var i = 0; i < count; i++) {
                userMappingRow = userMappingRows[i];
                var row = userMappingDao.getUserMappingRow(userMappingRow);
                row.hasId().should.be.equal(false);
                row.getBaseId().should.be.oneOf([4, 5]);
                if (row.getBaseId() === 4) {
                    row.getBaseId().should.be.equal(4);
                    row.getRelatedId().should.be.equal(7);
                }
                else if (row.getBaseId() === 5) {
                    row.getBaseId().should.be.equal(5);
                    row.getRelatedId().should.be.equal(5);
                }
                RelatedTablesUtils.validateUserRow(mappingColumns, row);
                RelatedTablesUtils.validateDublinCoreColumns(row);
                manualCount++;
            }
            manualCount.should.be.equal(count);
            var extendedRelationsDao = rte.extendedRelationDao;
            var attributeBaseTableRelations = extendedRelationsDao.getBaseTableRelations(attributesDao.table_name);
            var attributeTableRelations = extendedRelationsDao.getTableRelations(attributesDao.table_name);
            attributeBaseTableRelations.length.should.be.equal(1);
            attributeTableRelations.length.should.be.equal(1);
            attributeBaseTableRelations[0].id.should.be.equal(attributeTableRelations[0].id);
            extendedRelationsDao.getRelatedTableRelations(attributesDao.table_name).length.should.be.equal(1);
            // Test the attribute table relations
            for (i = 0; i < attributeBaseTableRelations.length; i++) {
                // Test the relation
                var attributeRelation = attributeBaseTableRelations[i];
                attributeRelation.id.should.be.greaterThan(0);
                attributesDao.table_name.should.be.equal(attributeRelation.base_table_name);
                attributesDao.table.getPkColumn().name.should.be.equal(attributeRelation.base_primary_column);
                baseTableName.should.be.equal(attributeRelation.related_table_name);
                attributesDao.table.getPkColumn().name.should.be.equal(attributeRelation.related_primary_column);
                'attributes'.should.be.equal(attributeRelation.relation_name);
            }
            var baseTables = extendedRelationsDao.getBaseTables();
            baseTables.length.should.be.equal(1);
            baseTables[0].should.be.equal(baseTableName);
            var relatedTables = extendedRelationsDao.getRelatedTables();
            relatedTables.length.should.be.equal(1);
            relatedTables[0].should.be.equal(baseTableName);
            // Delete a single mapping
            var countOfIds = userMappingDao.countByIds(5);
            var queryOfIds = userMappingDao.queryByIds(5);
            var queryCount = 0;
            try {
                for (var queryOfIds_1 = __values(queryOfIds), queryOfIds_1_1 = queryOfIds_1.next(); !queryOfIds_1_1.done; queryOfIds_1_1 = queryOfIds_1.next()) {
                    row = queryOfIds_1_1.value;
                    queryCount++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (queryOfIds_1_1 && !queryOfIds_1_1.done && (_a = queryOfIds_1.return)) _a.call(queryOfIds_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            queryCount.should.be.equal(countOfIds);
            countOfIds.should.be.equal(userMappingDao.deleteByIds(5));
            var userMappingCount = userMappingDao.count();
            userMappingCount.should.be.equal(2 - countOfIds);
            // Delete by base id
            var baseIdQuery = userMappingDao.queryByBaseId(4);
            var countOfBaseIds = baseIdQuery.length;
            var deleted = userMappingDao.deleteByBaseId(4);
            deleted.should.be.equal(countOfBaseIds);
            // Delete the relationship and user mapping table
            rte.removeRelationship(extendedRelation);
            rte.has(userMappingTable.table_name).should.be.equal(false);
            relationships = rte.getRelationships();
            relationships.length.should.be.equal(0);
            geoPackage.isTable(mappingTableName).should.be.equal(false);
            // Delete the related tables extension
            rte.removeExtension();
            rte.has().should.be.equal(false);
        });
    });
});
//# sourceMappingURL=testRelatedAttributes.js.map