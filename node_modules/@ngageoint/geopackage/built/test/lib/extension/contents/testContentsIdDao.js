"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var contentsDao_1 = require("../../../../lib/core/contents/contentsDao");
var Verification = require('../../../fixtures/verification'), should = require('chai').should(), path = require('path');
describe('ContentsIdExtension Tests', function () {
    var testGeoPackage;
    var geopackage;
    var tableName = 'test';
    var contents;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createTmpGeoPackage()];
                    case 1:
                        created = _a.sent();
                        testGeoPackage = created.path;
                        geopackage = created.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    beforeEach('create the GeoPackage connection', function () {
        return __awaiter(this, void 0, void 0, function () {
            var contentsDao, contentsIdExtension, contentsIdDao;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contentsDao = geopackage.contentsDao;
                        contentsIdExtension = geopackage.contentsIdExtension;
                        return [4 /*yield*/, contentsIdExtension.getOrCreateExtension()];
                    case 1:
                        _a.sent();
                        contentsIdDao = contentsIdExtension.dao;
                        contents = contentsDao.createObject();
                        contents.table_name = tableName;
                        contents.data_type = contentsDao_1.ContentsDao.GPKG_CDT_FEATURES_NAME;
                        contentsDao.create(contents);
                        return [4 /*yield*/, contentsIdDao.createTable()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testGeoPackage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create a nga_contents_id table', function () {
        Verification.verifyContentsId(geopackage).should.be.equal(true);
    });
    it('should create a record in the nga_contents_id table', function () {
        // test create
        geopackage.contentsIdExtension.create(contents).table_name.should.be.equal(tableName);
    });
    it('should create a record in the nga_contents_id table', function () {
        // test create
        geopackage.contentsIdExtension.createId(contents).table_name.should.be.equal(tableName);
    });
    it('should retrieve table_name\'s of contents without record in contentsId table', function () {
        // test getMissing
        var missing = geopackage.contentsIdExtension.getMissing("");
        missing.length.should.be.equal(1);
        // test create
        var contentsId = geopackage.contentsIdExtension.create(contents);
        contentsId.table_name.should.be.equal(tableName);
        // test getMissing returns nothing when all contents records have entry in contentsId table
        missing = geopackage.contentsIdExtension.getMissing("");
        missing.length.should.be.equal(0);
    });
    it('should retrieve table_name\'s of contents without record in contentsId table for given type', function () {
        // test getMissing
        var missing = geopackage.contentsIdExtension.getMissing(contentsDao_1.ContentsDao.GPKG_CDT_FEATURES_NAME);
        missing.length.should.be.equal(1);
        // test create
        var contentsId = geopackage.contentsIdExtension.create(contents);
        contentsId.table_name.should.be.equal(tableName);
        // test getMissing returns nothing when all contents records have entry in contentsId table
        missing = geopackage.contentsIdExtension.getMissing(contentsDao_1.ContentsDao.GPKG_CDT_FEATURES_NAME);
        missing.length.should.be.equal(0);
    });
    it('should retrieve contentsId using contents object', function () {
        // create contentsId for contents
        geopackage.contentsIdExtension.create(contents);
        // retrieve by contents
        geopackage.contentsIdExtension.get(contents).table_name.should.be.equal(contents.table_name);
    });
    it('should retrieve contentsId by data_type of contents', function () {
        // create contentsId for contents
        geopackage.contentsIdExtension.create(contents);
        // test getIdsByType
        var contentIdsForTypeFeature = geopackage.contentsIdExtension.getIdsByType(contentsDao_1.ContentsDao.GPKG_CDT_FEATURES_NAME);
        contentIdsForTypeFeature.length.should.be.equal(1);
        contentIdsForTypeFeature = geopackage.contentsIdExtension.getIdsByType(contentsDao_1.ContentsDao.GPKG_CDT_ATTRIBUTES_NAME);
        contentIdsForTypeFeature.length.should.be.equal(0);
        contentIdsForTypeFeature = geopackage.contentsIdExtension.getIdsByType(contentsDao_1.ContentsDao.GPKG_CDT_TILES_NAME);
        contentIdsForTypeFeature.length.should.be.equal(0);
    });
    it('should delete contentsId by type', function () {
        // create contentsId for contents
        geopackage.contentsIdExtension.create(contents);
        // test deleteIds
        var numDeleted = geopackage.contentsIdExtension.deleteIds(contentsDao_1.ContentsDao.GPKG_CDT_FEATURES_NAME);
        numDeleted.should.be.equal(1);
        // test deleteIds when no ids to be deleted
        numDeleted = geopackage.contentsIdExtension.deleteIds(contentsDao_1.ContentsDao.GPKG_CDT_FEATURES_NAME);
        numDeleted.should.be.equal(0);
    });
    it('should getId for contents', function () {
        var id = geopackage.contentsIdExtension.create(contents).id;
        geopackage.contentsIdExtension.getId(contents).should.be.equal(id);
    });
    it('should create contentsIds for all contents without contentsIds', function () {
        // test createIds which will create ids for all contents without contents ids
        geopackage.contentsIdExtension.createIds().should.be.equal(1);
    });
    it('should create getOrCreate contents id', function () {
        // test that get or create will get the contents id when it doesn't exist
        var contentsId = geopackage.contentsIdExtension.getOrCreateId(contents);
        contentsId.table_name.should.be.equal(tableName);
        // test that get or create will create the contents id when it does exist
        contentsId = geopackage.contentsIdExtension.getOrCreateId(contents);
        contentsId.table_name.should.be.equal(tableName);
    });
    it('should deleteId by contents', function () {
        // test createIds which will create ids for all contents without contents ids
        var numCreated = geopackage.contentsIdExtension.createIds();
        numCreated.should.be.equal(1);
        // delete by table name
        geopackage.contentsIdExtension.deleteId(contents).should.be.equal(1);
    });
    it('should return the count of contentsIds', function () {
        // test createIds which will create ids for all contents without contents ids
        geopackage.contentsIdExtension.createIds();
        geopackage.contentsIdExtension.count().should.be.equal(1);
    });
    it('should return array of table names', function () {
        geopackage.contentsIdExtension.dao.getTableNames().length.should.be.equal(0);
        geopackage.contentsIdExtension.createIds();
        geopackage.contentsIdExtension.dao.getTableNames().length.should.be.equal(1);
    });
    it('should return contents id for table name', function () {
        should.not.exist(geopackage.contentsIdExtension.dao.queryForTableName(tableName));
        geopackage.contentsIdExtension.createIds();
        geopackage.contentsIdExtension.dao.queryForTableName(tableName).table_name.should.be.equal(tableName);
    });
});
//# sourceMappingURL=testContentsIdDao.js.map