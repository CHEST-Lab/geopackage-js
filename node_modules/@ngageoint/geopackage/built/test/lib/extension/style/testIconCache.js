"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("../../../..");
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var FeatureTableStyles = require('../../../../lib/extension/style/featureTableStyles').FeatureTableStyles, IconCache = require('../../../../lib/extension/style/iconCache').IconCache
// , testSetup = require('../../../fixtures/testSetup')
, should = require('chai').should(), path = require('path'), ImageUtils = require('../../../../lib/tiles/imageUtils').ImageUtils
// , GeoPackageAPI = require('../../../../lib/api')
// @ts-ignore
, fs = require('fs-extra');
describe('IconCache Tests', function () {
    var _this = this;
    var testGeoPackage;
    var geopackage;
    var featureTableName = 'feature_table';
    // @ts-ignore
    var featureTable;
    var featureTableStyles;
    var iconImage;
    var iconImageBuffer;
    var randomIcon = function (featureTableStyles) {
        var iconRow = featureTableStyles.getIconDao().newRow();
        iconRow.setData(iconImageBuffer);
        iconRow.setContentType('image/png');
        iconRow.setName("Icon Name");
        iconRow.setDescription("Icon Description");
        iconRow.setWidth(Math.random() * iconImage.width);
        iconRow.setHeight(Math.random() * iconImage.height);
        iconRow.setAnchorU(Math.random());
        iconRow.setAnchorV(Math.random());
        return iconRow;
    };
    var compareImages = function (imageA, imageB) {
        return new Promise(function (resolve) {
            var actualCanvas, actualCtx, expectedCanvas, expectedCtx;
            if (typeof (process) !== 'undefined' && process.version) {
                var Canvas = require('canvas');
                actualCanvas = Canvas.createCanvas(imageA.width, imageA.height);
                actualCtx = actualCanvas.getContext('2d');
                expectedCanvas = Canvas.createCanvas(imageB.width, imageB.height);
                expectedCtx = expectedCanvas.getContext('2d');
            }
            else {
                actualCanvas = document.getElementById('canvas');
                // @ts-ignore
                actualCanvas.width = imageA.width;
                // @ts-ignore
                actualCanvas.height = imageA.height;
                // @ts-ignore
                actualCtx = actualCanvas.getContext('2d');
                expectedCanvas = document.getElementById('canvas');
                // @ts-ignore
                expectedCanvas.width = imageB.width;
                // @ts-ignore
                expectedCanvas.height = imageB.height;
                // @ts-ignore
                expectedCtx = expectedCanvas.getContext('2d');
            }
            actualCtx.drawImage(imageA, 0, 0);
            expectedCtx.drawImage(imageB, 0, 0);
            // @ts-ignore
            resolve(actualCanvas.toDataURL() === expectedCanvas.toDataURL());
        });
    };
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createTmpGeoPackage()];
                    case 1:
                        created = _a.sent();
                        testGeoPackage = created.path;
                        geopackage = created.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    beforeEach('create the GeoPackage connection and setup the FeatureStyleExtension', function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __1.GeoPackage.createFeatureTable(geopackage, featureTableName)];
                    case 1:
                        // create a feature table first
                        featureTable = _a.sent();
                        return [4 /*yield*/, geopackage.featureStyleExtension.getOrCreateExtension(featureTableName)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, geopackage.featureStyleExtension.getRelatedTables().getOrCreateExtension()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, geopackage.featureStyleExtension.getContentsId().getOrCreateExtension()];
                    case 4:
                        _a.sent();
                        featureTableStyles = new FeatureTableStyles(geopackage, featureTableName);
                        return [4 /*yield*/, featureTableStyles.createIconRelationship()];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, ImageUtils.getImage(path.join(__dirname, '..', '..', '..', 'fixtures', 'point.png'))
                            // @ts-ignore
                        ];
                    case 6:
                        iconImage = _a.sent();
                        return [4 /*yield*/, loadTile(path.join(__dirname, '..', '..', '..', 'fixtures', 'point.png'))];
                    case 7:
                        // @ts-ignore
                        iconImageBuffer = _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testGeoPackage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create icon cache', function () {
        var iconCache = new IconCache();
        iconCache.cacheSize.should.be.equal(IconCache.DEFAULT_CACHE_SIZE);
        var cacheSize = 50;
        iconCache = new IconCache(cacheSize);
        iconCache.cacheSize.should.be.equal(cacheSize);
    });
    it('should test icon cache should return icon for icon row', function () {
        var iconCache = new IconCache();
        var iconRow = randomIcon(featureTableStyles);
        iconRow.setId(0);
        should.not.exist(iconCache.getIconForIconRow(iconRow));
        should.not.exist(iconCache.putIconForIconRow(iconRow, iconImage));
        should.exist(iconCache.getIconForIconRow(iconRow));
        should.exist(iconCache.putIconForIconRow(iconRow, iconImage));
        should.exist(iconCache.getIconForIconRow(iconRow));
        should.exist(iconCache.removeIconForIconRow(iconRow));
        should.not.exist(iconCache.removeIconForIconRow(iconRow));
    });
    it('should test icon cache should only store up to the cache size', function () {
        var cacheSize = 3;
        var iconCache = new IconCache(cacheSize);
        // test access history stuff
        for (var i = 0; i < cacheSize * 2; i++) {
            var testRow = randomIcon(featureTableStyles);
            testRow.setId(i + 1);
            iconCache.putIconForIconRow(testRow, iconImage);
            Object.keys(iconCache.iconCache).length.should.be.below(cacheSize + 1);
        }
        Object.keys(iconCache.iconCache).length.should.be.equal(cacheSize);
    });
    it('should clear icon cache', function () {
        var cacheSize = 3;
        var iconCache = new IconCache(cacheSize);
        var iconRow = randomIcon(featureTableStyles);
        iconRow.setId(0);
        iconCache.putIconForIconRow(iconRow, iconImage);
        Object.keys(iconCache.iconCache).length.should.be.equal(1);
        iconCache.clear();
        Object.keys(iconCache.iconCache).length.should.be.equal(0);
    });
    it('should resize icon cache', function () {
        var cacheSize = 5;
        var iconCache = new IconCache(cacheSize);
        // test access history stuff
        for (var i = 0; i < cacheSize; i++) {
            var testRow = randomIcon(featureTableStyles);
            testRow.setId(i + 1);
            iconCache.putIconForIconRow(testRow, iconImage);
            Object.keys(iconCache.iconCache).length.should.be.below(cacheSize + 1);
        }
        var newCacheSize = 3;
        iconCache.resize(newCacheSize);
        Object.keys(iconCache.iconCache).length.should.be.equal(newCacheSize);
        // test resizing to larger number, shouldn't remove any icons from the cache
        iconCache.resize(cacheSize);
        Object.keys(iconCache.iconCache).length.should.be.equal(newCacheSize);
    });
    var mochaAsync = function (fn) {
        return function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, fn()];
                }
                catch (err) {
                    console.log(err);
                }
                return [2 /*return*/];
            });
        }); };
    };
    it('should create icon and cache it', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var iconCache, iconRow, image, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iconCache = new IconCache();
                    iconRow = randomIcon(featureTableStyles);
                    iconRow.setId(0);
                    return [4 /*yield*/, iconCache.createIcon(iconRow)];
                case 1:
                    image = _a.sent();
                    return [4 /*yield*/, compareImages(image, iconImage)];
                case 2:
                    result = _a.sent();
                    result.should.be.equal(true);
                    should.exist(iconCache.getIconForIconRow(iconRow));
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should create icon but not cache it', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var iconCache, iconRow, image, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iconCache = new IconCache();
                    iconRow = randomIcon(featureTableStyles);
                    iconRow.setId(0);
                    return [4 /*yield*/, iconCache.createIconNoCache(iconRow)];
                case 1:
                    image = _a.sent();
                    return [4 /*yield*/, compareImages(image, iconImage)];
                case 2:
                    result = _a.sent();
                    result.should.be.equal(true);
                    should.not.exist(iconCache.getIconForIconRow(iconRow));
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should create scaled icon but not cache it', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var iconCache, iconRow, expectedImage, image, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iconCache = new IconCache();
                    iconRow = randomIcon(featureTableStyles);
                    iconRow.setId(0);
                    return [4 /*yield*/, ImageUtils.getImage(path.join(__dirname, '..', '..', '..', 'fixtures', 'point_2x.png'))];
                case 1:
                    expectedImage = _a.sent();
                    return [4 /*yield*/, iconCache.createScaledIconNoCache(iconRow, 2.0)];
                case 2:
                    image = _a.sent();
                    return [4 /*yield*/, compareImages(expectedImage, image)];
                case 3:
                    result = _a.sent();
                    result.should.be.equal(true);
                    should.not.exist(iconCache.getIconForIconRow(iconRow));
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should create scaled icon and cache it', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var iconCache, iconRow, expectedImage, image, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iconCache = new IconCache();
                    iconRow = randomIcon(featureTableStyles);
                    iconRow.setId(0);
                    return [4 /*yield*/, ImageUtils.getImage(path.join(__dirname, '..', '..', '..', 'fixtures', 'point_2x.png'))];
                case 1:
                    expectedImage = _a.sent();
                    return [4 /*yield*/, iconCache.createScaledIcon(iconRow, 2.0)];
                case 2:
                    image = _a.sent();
                    return [4 /*yield*/, compareImages(expectedImage, image)];
                case 3:
                    result = _a.sent();
                    result.should.be.equal(true);
                    should.exist(iconCache.getIconForIconRow(iconRow));
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should create scaled icon and cache it even when already cached', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var iconCache, iconRow, expectedImage, image, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    iconCache = new IconCache();
                    iconRow = randomIcon(featureTableStyles);
                    iconRow.setId(0);
                    iconCache.putIconForIconRow(iconRow, iconImage);
                    return [4 /*yield*/, ImageUtils.getImage(path.join(__dirname, '..', '..', '..', 'fixtures', 'point_2x.png'))];
                case 1:
                    expectedImage = _a.sent();
                    return [4 /*yield*/, iconCache.createScaledIcon(iconRow, 2.0)];
                case 2:
                    image = _a.sent();
                    return [4 /*yield*/, compareImages(expectedImage, image)];
                case 3:
                    result = _a.sent();
                    result.should.be.equal(true);
                    should.exist(iconCache.getIconForIconRow(iconRow));
                    return [2 /*return*/];
            }
        });
    }); }));
});
//# sourceMappingURL=testIconCache.js.map