"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("../../../..");
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var style_1 = require("../../../../lib/extension/style");
var FeatureTableStyles = require('../../../../lib/extension/style/featureTableStyles').FeatureTableStyles, StyleMappingTable = require('../../../../lib/extension/style/styleMappingTable').StyleMappingTable, StyleTable = require('../../../../lib/extension/style/styleTable').StyleTable, Styles = require('../../../../lib/extension/style/styles').Styles, Icons = require('../../../../lib/extension/style/icons').Icons, FeatureStyles = require('../../../../lib/extension/style/featureStyles').FeatureStyles, FeatureStyle = require('../../../../lib/extension/style/featureStyle').FeatureStyle, IconTable = require('../../../../lib/extension/style/iconTable').IconTable, ContentsIdDao = require('../../../../lib/extension/contents/contentsIdDao').ContentsIdDao
// , testSetup = require('../../../fixtures/testSetup')
, ImageUtils = require('../../../../lib/tiles/imageUtils').ImageUtils, should = require('chai').should(), assert = require('assert'), path = require('path')
// , GeoPackageAPI = require('../../../../lib/api')
, wkx = require('wkx'), fs = require('fs-extra'), GeometryData = require('../../../../lib/geom/geometryData').GeometryData;
describe('StyleExtension Tests', function () {
    var _this = this;
    var testGeoPackage;
    var geopackage;
    var featureTableName = 'feature_table';
    var featureTable;
    var featureTableStyles;
    var featureRowId;
    var iconImage;
    var iconImageBuffer;
    var mochaAsync = function (fn) {
        return function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    return [2 /*return*/, fn()];
                }
                catch (err) {
                    console.log(err);
                }
                return [2 /*return*/];
            });
        }); };
    };
    var createRow = function (geoJson, name, featureDao) {
        var srs = featureDao.getSrs();
        var featureRow = featureDao.newRow();
        var geometryData = new GeometryData();
        geometryData.setSrsId(srs.srs_id);
        var geometry = wkx.Geometry.parseGeoJSON(geoJson);
        geometryData.setGeometry(geometry);
        featureRow.setGeometry(geometryData);
        featureRow.setValueWithColumnName('name', name);
        featureRow.setValueWithColumnName('_feature_id', name);
        featureRow.setValueWithColumnName('_properties_id', 'properties' + name);
        return featureDao.create(featureRow);
    };
    var randomIcon = function (featureTableStyles) {
        var iconRow = featureTableStyles.getIconDao().newRow();
        iconRow.setData(iconImageBuffer);
        iconRow.setContentType('image/png');
        iconRow.setName("Icon Name");
        iconRow.setDescription("Icon Description");
        iconRow.setWidth(Math.random() * iconImage.width);
        iconRow.setHeight(Math.random() * iconImage.height);
        iconRow.setAnchorU(Math.random());
        iconRow.setAnchorV(Math.random());
        return iconRow;
    };
    var randomStyle = function (featureTableStyles) {
        var styleRow = featureTableStyles.getStyleDao().createObject();
        styleRow.setName("Style Name");
        styleRow.setDescription("Style Description");
        styleRow.setColor(randomColor(), 1.0);
        styleRow.setFillColor(randomColor(), 1.0);
        styleRow.setWidth(1.0 + (Math.random() * 3));
        return styleRow;
    };
    var randomColor = function () {
        var length = 6;
        var chars = '0123456789ABCDEF';
        var hex = '#';
        while (length--)
            hex += chars[(Math.random() * 16) | 0];
        return hex;
    };
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createTmpGeoPackage()];
                    case 1:
                        created = _a.sent();
                        testGeoPackage = created.path;
                        geopackage = created.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    beforeEach('create the GeoPackage connection and setup the FeatureStyleExtension', function () {
        return __awaiter(this, void 0, void 0, function () {
            var box;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __1.GeoPackage.createFeatureTable(geopackage, featureTableName)];
                    case 1:
                        // create a feature table first
                        featureTable = _a.sent();
                        box = {
                            "type": "Polygon",
                            "coordinates": [[[-1, 1], [1, 1], [1, 3], [-1, 3], [-1, 1]]]
                        };
                        featureRowId = createRow(box, 'box', geopackage.getFeatureDao(featureTableName));
                        return [4 /*yield*/, geopackage.featureStyleExtension.getOrCreateExtension(featureTableName)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, geopackage.featureStyleExtension.getRelatedTables().getOrCreateExtension()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, geopackage.featureStyleExtension.getContentsId().getOrCreateExtension()];
                    case 4:
                        _a.sent();
                        featureTableStyles = new FeatureTableStyles(geopackage, featureTableName);
                        return [4 /*yield*/, ImageUtils.getImage(path.join(__dirname, '..', '..', '..', 'fixtures', 'point.png'))
                            // @ts-ignore
                        ];
                    case 5:
                        iconImage = _a.sent();
                        return [4 /*yield*/, loadTile(path.join(__dirname, '..', '..', '..', 'fixtures', 'point.png'))];
                    case 6:
                        // @ts-ignore
                        iconImageBuffer = _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testGeoPackage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create extension for feature table', function () {
        var extensions = geopackage.extensionDao.queryByExtensionAndTableName(style_1.FeatureStyleExtension.EXTENSION_NAME, featureTableName);
        should.exist(extensions.length);
        if (extensions.length) {
            extensions.length.should.be.equal(1);
        }
    });
    it('should check if geopackage has extension or not', function () {
        geopackage.featureStyleExtension.has(featureTableName).should.be.equal(true);
        geopackage.featureStyleExtension.has('not_valid_feature_table').should.be.equal(false);
        featureTableStyles.has().should.be.equal(true);
    });
    it('should return all feature tables with style extension', function () {
        geopackage.featureStyleExtension.getTables().length.should.be.equal(1);
    });
    it('should get related tables extension', function () {
        geopackage.featureStyleExtension.getRelatedTables().should.be.equal(geopackage.relatedTablesExtension);
    });
    it('should get content id extension', function () {
        geopackage.featureStyleExtension.getContentsId().should.be.equal(geopackage.contentsIdExtension);
    });
    it('should create relationships', function () {
        return featureTableStyles.createRelationships().then(function () {
            featureTableStyles.hasStyleRelationship().should.be.equal(true);
            featureTableStyles.hasTableStyleRelationship().should.be.equal(true);
            featureTableStyles.hasIconRelationship().should.be.equal(true);
            featureTableStyles.hasTableIconRelationship().should.be.equal(true);
            featureTableStyles.hasRelationship().should.be.equal(true);
            featureTableStyles.deleteRelationships();
            featureTableStyles.hasRelationship().should.be.equal(false);
        });
    });
    it('should get table name', function () {
        featureTableStyles.getTableName().should.be.equal(featureTableName);
    });
    it('should delete all relationships', function () {
        return featureTableStyles.createRelationships().then(function () {
            featureTableStyles.deleteRelationships();
            featureTableStyles.hasRelationship().should.be.equal(false);
        });
    });
    it('should create and delete style relationship', function () {
        return featureTableStyles.createStyleRelationship().then(function () {
            featureTableStyles.hasStyleRelationship().should.be.equal(true);
            featureTableStyles.deleteStyleRelationship();
            featureTableStyles.hasStyleRelationship().should.be.equal(false);
        });
    });
    it('should create and delete table style relationship', function () {
        return featureTableStyles.createTableStyleRelationship().then(function () {
            featureTableStyles.hasTableStyleRelationship().should.be.equal(true);
            featureTableStyles.deleteTableStyleRelationship();
            featureTableStyles.hasTableStyleRelationship().should.be.equal(false);
        });
    });
    it('should create and delete icon relationship', function () {
        return featureTableStyles.createIconRelationship().then(function () {
            featureTableStyles.hasIconRelationship().should.be.equal(true);
            featureTableStyles.deleteIconRelationship();
            featureTableStyles.hasIconRelationship().should.be.equal(false);
        });
    });
    it('should create and delete table icon relationship', function () {
        return featureTableStyles.createTableIconRelationship().then(function () {
            featureTableStyles.hasTableIconRelationship().should.be.equal(true);
            featureTableStyles.deleteTableIconRelationship();
            featureTableStyles.hasTableIconRelationship().should.be.equal(false);
        });
    });
    it('should create style relationship even if contentsIdExtension does not yet exist', function () {
        geopackage.contentsIdExtension.removeExtension();
        return featureTableStyles.createTableIconRelationship().then(function () {
            featureTableStyles.hasTableIconRelationship().should.be.equal(true);
        });
    });
    it('should delete all relationships', function () {
        return featureTableStyles.createTableStyleRelationship().then(function () {
            featureTableStyles.hasTableStyleRelationship().should.be.equal(true);
            geopackage.featureStyleExtension.deleteAllRelationships();
            featureTableStyles.hasTableStyleRelationship().should.be.equal(false);
        });
    });
    it('should verify styles do not yet exist', function () {
        should.not.exist(featureTableStyles.getTableFeatureStyles());
        should.not.exist(featureTableStyles.getTableStyles());
        should.not.exist(featureTableStyles.getCachedTableStyles());
        should.not.exist(featureTableStyles.getTableStyleDefault());
        should.not.exist(featureTableStyles.getTableStyle("GEOMETRY"));
        should.not.exist(featureTableStyles.getTableIcons());
        should.not.exist(featureTableStyles.getCachedTableIcons());
        should.not.exist(featureTableStyles.getTableIconDefault());
        should.not.exist(featureTableStyles.getTableIcon("GEOMETRY"));
        var featureDao = geopackage.getFeatureDao(featureTableName);
        var featureRow = featureDao.queryForId(featureRowId);
        should.not.exist(featureTableStyles.getFeatureStylesForFeatureRow(featureRow));
        should.not.exist(featureTableStyles.getFeatureStyles(featureRow.getId()));
        should.not.exist(featureTableStyles.getFeatureStyleForFeatureRow(featureRow));
        should.not.exist(featureTableStyles.getFeatureStyleDefault(featureRow));
        should.not.exist(featureTableStyles.getFeatureStyle(featureRow.getId(), featureRow.getGeometryType()));
        should.not.exist(featureTableStyles.getFeatureStyleDefault(featureRow.getId()));
        should.not.exist(featureTableStyles.getStylesForFeatureRow(featureRow));
        should.not.exist(featureTableStyles.getStylesForFeatureId(featureRow.getId()));
        should.not.exist(featureTableStyles.getStyleForFeatureRow(featureRow));
        should.not.exist(featureTableStyles.getStyleDefaultForFeatureRow(featureRow));
        should.not.exist(featureTableStyles.getStyle(featureRow.getId(), featureRow.getGeometryType()));
        should.not.exist(featureTableStyles.getStyleDefault(featureRow.getId()));
        should.not.exist(featureTableStyles.getIconsForFeatureRow(featureRow));
        should.not.exist(featureTableStyles.getIconsForFeatureId(featureRow.getId()));
        should.not.exist(featureTableStyles.getIconForFeatureRow(featureRow));
        should.not.exist(featureTableStyles.getIconDefaultForFeatureRow(featureRow));
        should.not.exist(featureTableStyles.getIcon(featureRow.getId(), featureRow.getGeometryType()));
        should.not.exist(featureTableStyles.getIconDefault(featureRow.getId()));
    });
    it('should test IconRow methods', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var pointIcon, retrievedIcon, retrievedIconWidth, retrievedIconHeight, retrievedIconAnchorU, retrievedIconAnchorV, badAnchor;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, featureTableStyles.createTableIconRelationship()];
                case 1:
                    _a.sent();
                    pointIcon = randomIcon(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setTableIcon('Point', pointIcon)];
                case 2:
                    _a.sent();
                    retrievedIcon = featureTableStyles.getTableIcon('Point');
                    retrievedIcon.getName().should.be.equal('Icon Name');
                    retrievedIcon.getDescription().should.be.equal('Icon Description');
                    retrievedIcon.getWidth().should.be.below(retrievedIcon.getWidth() + 0.1);
                    retrievedIcon.getHeight().should.be.below(retrievedIcon.getHeight() + 0.1);
                    retrievedIcon.getAnchorUOrDefault().should.be.below(1.1);
                    retrievedIcon.getAnchorVOrDefault().should.be.below(1.1);
                    return [4 /*yield*/, retrievedIcon.getDerivedWidth()];
                case 3:
                    (_a.sent()).should.be.equal(retrievedIcon.getWidth());
                    return [4 /*yield*/, retrievedIcon.getDerivedHeight()];
                case 4:
                    (_a.sent()).should.be.equal(retrievedIcon.getHeight());
                    retrievedIconWidth = retrievedIcon.getWidth();
                    retrievedIconHeight = retrievedIcon.getHeight();
                    retrievedIconAnchorU = retrievedIcon.getAnchorU();
                    retrievedIconAnchorV = retrievedIcon.getAnchorV();
                    retrievedIcon.setAnchorU(null);
                    retrievedIcon.setAnchorV(null);
                    retrievedIcon.getAnchorUOrDefault().should.be.equal(0.5);
                    retrievedIcon.getAnchorVOrDefault().should.be.equal(1.0);
                    retrievedIcon.setAnchorU(retrievedIconAnchorU);
                    retrievedIcon.setAnchorV(retrievedIconAnchorV);
                    retrievedIcon.setWidth(null);
                    retrievedIcon.setHeight(null);
                    return [4 /*yield*/, retrievedIcon.getDerivedWidth()];
                case 5:
                    (_a.sent()).should.be.equal(iconImage.width);
                    return [4 /*yield*/, retrievedIcon.getDerivedHeight()];
                case 6:
                    (_a.sent()).should.be.equal(iconImage.height);
                    retrievedIcon.setWidth(retrievedIconWidth);
                    retrievedIcon.setHeight(null);
                    return [4 /*yield*/, retrievedIcon.getDerivedWidth()];
                case 7:
                    (_a.sent()).should.be.equal(retrievedIconWidth);
                    return [4 /*yield*/, retrievedIcon.getDerivedHeight()];
                case 8:
                    (_a.sent()).should.be.equal(iconImage.height * (retrievedIconWidth / iconImage.width));
                    retrievedIcon.setWidth(null);
                    retrievedIcon.setHeight(retrievedIconHeight);
                    return [4 /*yield*/, retrievedIcon.getDerivedWidth()];
                case 9:
                    (_a.sent()).should.be.equal(iconImage.width * (retrievedIconHeight / iconImage.height));
                    return [4 /*yield*/, retrievedIcon.getDerivedHeight()];
                case 10:
                    (_a.sent()).should.be.equal(retrievedIconHeight);
                    retrievedIcon.setWidth(retrievedIconWidth);
                    retrievedIcon.setHeight(retrievedIconHeight);
                    retrievedIcon.validateAnchor(null);
                    retrievedIcon.validateAnchor(0.0);
                    retrievedIcon.validateAnchor(0.5);
                    retrievedIcon.validateAnchor(1.0);
                    badAnchor = -1.0;
                    assert.throws(function () {
                        retrievedIcon.validateAnchor(badAnchor);
                    }, Error, "Anchor must be set inclusively between 0.0 and 1.0, invalid value: " + badAnchor);
                    badAnchor = 1.1;
                    assert.throws(function () {
                        retrievedIcon.validateAnchor(badAnchor);
                    }, Error, "Anchor must be set inclusively between 0.0 and 1.0, invalid value: " + badAnchor);
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should test StyleRow methods', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var rS, badColor, badOpacity, badWidth;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, featureTableStyles.createTableStyleRelationship()];
                case 1:
                    _a.sent();
                    rS = randomStyle(featureTableStyles);
                    rS.getName().should.be.equal('Style Name');
                    rS.getDescription().should.be.equal('Style Description');
                    rS.hasColor().should.be.equal(true);
                    rS.setHexColor(null);
                    rS.setOpacity(1.0);
                    rS.hasColor().should.be.equal(true);
                    rS.setHexColor('#000000');
                    rS.setOpacity(null);
                    rS.hasColor().should.be.equal(true);
                    rS.setHexColor(null);
                    rS.setOpacity(null);
                    rS.hasColor().should.be.equal(false);
                    rS.hasFillColor().should.be.equal(true);
                    rS.setFillOpacity(null);
                    rS.getOpacityOrDefault().should.be.equal(1.0);
                    rS.getFillOpacityOrDefault().should.be.equal(1.0);
                    badColor = '#GGGGGG';
                    assert.throws(function () {
                        rS.setHexColor(badColor);
                    }, Error, "Color must be in hex format #RRGGBB or #RGB, invalid value: " + badColor);
                    assert.throws(function () {
                        rS.setFillHexColor(badColor);
                    }, Error, "Color must be in hex format #RRGGBB or #RGB, invalid value: " + badColor);
                    badOpacity = 2.0;
                    assert.throws(function () {
                        rS.setOpacity(badOpacity);
                    }, Error, "Opacity must be set inclusively between 0.0 and 1.0, invalid value: " + badOpacity);
                    assert.throws(function () {
                        rS.setFillOpacity(badOpacity);
                    }, Error, "Opacity must be set inclusively between 0.0 and 1.0, invalid value: " + badOpacity);
                    badOpacity = -2.0;
                    assert.throws(function () {
                        rS.setOpacity(badOpacity);
                    }, Error, "Opacity must be set inclusively between 0.0 and 1.0, invalid value: " + badOpacity);
                    assert.throws(function () {
                        rS.setFillOpacity(badOpacity);
                    }, Error, "Opacity must be set inclusively between 0.0 and 1.0, invalid value: " + badOpacity);
                    rS.setHexColor('000000');
                    rS.setFillHexColor('#000000');
                    rS.setOpacity(1.0);
                    rS.setFillOpacity(0.0);
                    rS.getColor().toUpperCase().should.be.equal('#000000FF');
                    rS.getFillColor().toUpperCase().should.be.equal('#00000000');
                    rS.getOpacityOrDefault().should.be.equal(1.0);
                    rS.getFillOpacityOrDefault().should.be.equal(0.0);
                    badWidth = -1.0;
                    assert.throws(function () {
                        rS.setWidth(badWidth);
                    }, Error, "Width must be greater than or equal to 0.0, invalid value: " + badWidth);
                    rS.setWidth(2.0);
                    rS.getWidth().should.be.equal(2.0);
                    rS.getWidthOrDefault().should.be.equal(2.0);
                    rS.setWidth(null);
                    rS.getWidthOrDefault().should.be.equal(1.0);
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should test Styles and Icons methods', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var styleRow, iconRow, styles, icons;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, featureTableStyles.createStyleRelationship()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.createIconRelationship()];
                case 2:
                    _a.sent();
                    styleRow = randomStyle(featureTableStyles);
                    iconRow = randomIcon(featureTableStyles);
                    styles = new Styles();
                    should.not.exist(styles.getDefault());
                    styles.setDefault(styleRow);
                    should.exist(styles.getDefault());
                    should.not.exist(styles.getStyle('Point'));
                    styles.setStyle(styleRow, 'Point');
                    should.exist(styles.getStyle('Point'));
                    styles.setStyle(null, 'Point');
                    should.not.exist(styles.getStyle('Point'));
                    styles.setStyle(null, null);
                    should.not.exist(styles.getStyle(null));
                    icons = new Icons();
                    should.not.exist(icons.getDefault());
                    icons.setDefault(iconRow);
                    should.exist(icons.getDefault());
                    should.not.exist(icons.getIcon('Point'));
                    icons.setIcon(iconRow, 'Point');
                    should.exist(icons.getIcon('Point'));
                    icons.setIcon(null, 'Point');
                    should.not.exist(icons.getIcon('Point'));
                    icons.setIcon(null, null);
                    should.not.exist(icons.getIcon(null));
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should test FeatureStyles methods', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var styleRow, iconRow, featureStyle;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, featureTableStyles.createStyleRelationship()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.createIconRelationship()];
                case 2:
                    _a.sent();
                    styleRow = randomStyle(featureTableStyles);
                    iconRow = randomIcon(featureTableStyles);
                    featureStyle = new FeatureStyle(null, null);
                    featureStyle.hasStyle().should.be.equal(false);
                    featureStyle.hasIcon().should.be.equal(false);
                    featureStyle.setStyle(styleRow);
                    featureStyle.setIcon(iconRow);
                    featureStyle.hasStyle().should.be.equal(true);
                    featureStyle.hasIcon().should.be.equal(true);
                    should.exist(featureStyle.getStyle());
                    should.exist(featureStyle.getIcon());
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should test IconTable, StyleTable, and StyleMappingTable indices', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var styleTable, iconTable, styleMappingTable;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, featureTableStyles.createStyleRelationship()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.createIconRelationship()];
                case 2:
                    _a.sent();
                    styleTable = featureTableStyles.getStyleDao().table;
                    styleTable.getNameColumnIndex().should.be.equal(1);
                    styleTable.getDescriptionColumnIndex().should.be.equal(2);
                    styleTable.getColorColumnIndex().should.be.equal(3);
                    styleTable.getOpacityColumnIndex().should.be.equal(4);
                    styleTable.getWidthColumnIndex().should.be.equal(5);
                    styleTable.getFillColorColumnIndex().should.be.equal(6);
                    styleTable.getFillOpacityColumnIndex().should.be.equal(7);
                    iconTable = featureTableStyles.getIconDao().table;
                    iconTable.getNameColumnIndex().should.be.equal(3);
                    iconTable.getDescriptionColumnIndex().should.be.equal(4);
                    iconTable.getWidthColumnIndex().should.be.equal(5);
                    iconTable.getHeightColumnIndex().should.be.equal(6);
                    iconTable.getAnchorUColumnIndex().should.be.equal(7);
                    iconTable.getAnchorVColumnIndex().should.be.equal(8);
                    styleMappingTable = StyleMappingTable.create('test');
                    styleMappingTable.getGeometryTypeNameColumnIndex().should.be.equal(2);
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should create, access, and modify styles and icons', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var tableStyleDefault, polygonStyle, featureStyles, tableStyles, tableIconDefault, pointIcon, tableIcons, types, featureRow, style, icon, typeStyle, typeIcon, i, j, t, featureResultsStyles, featureResultsIcons, featureDao, results, featureStyle, featureRowStyles, styleDefault, featureRowIcons, iconDefault, featureRowId, featureIcons, defaultStyle, defaultIcon, featureStyleExtension, tables, contentsIdExtension;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    should.not.exist(featureTableStyles.getStyleMappingDao());
                    should.not.exist(featureTableStyles.getTableStyleMappingDao());
                    should.not.exist(featureTableStyles.getIconMappingDao());
                    should.not.exist(featureTableStyles.getTableIconMappingDao());
                    return [4 /*yield*/, featureTableStyles.createTableStyleRelationship()];
                case 1:
                    _a.sent();
                    tableStyleDefault = randomStyle(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setTableStyleDefault(tableStyleDefault)];
                case 2:
                    _a.sent();
                    geopackage.featureStyleExtension.has(featureTableName).should.be.equal(true);
                    featureTableStyles.has().should.be.equal(true);
                    featureTableStyles.hasTableStyleRelationship().should.be.equal(true);
                    geopackage.isTable(StyleTable.TABLE_NAME).should.be.equal(true);
                    geopackage.isTable(ContentsIdDao.TABLE_NAME).should.be.equal(true);
                    geopackage.isTable(featureTableStyles.getFeatureStyleExtension().getMappingTableName(style_1.FeatureStyleExtension.TABLE_MAPPING_TABLE_STYLE, featureTableName)).should.be.equal(true);
                    should.exist(featureTableStyles.getTableStyleDefault());
                    polygonStyle = randomStyle(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setTableStyle('Polygon', polygonStyle)];
                case 3:
                    _a.sent();
                    featureStyles = featureTableStyles.getTableFeatureStyles();
                    should.exist(featureStyles);
                    should.exist(featureStyles.getStyles());
                    console.log('featureStyles.getIcons()', featureStyles.getIcons());
                    should.not.exist(featureStyles.getIcons());
                    tableStyles = featureTableStyles.getTableStyles();
                    should.exist(tableStyles);
                    should.exist(tableStyles.getDefault());
                    tableStyles.getDefault().getId().should.be.equal(tableStyleDefault.getId());
                    featureTableStyles.getTableStyle(null).getId().should.be.equal(tableStyleDefault.getId());
                    featureTableStyles.getTableStyle('Polygon').getId().should.be.equal(polygonStyle.getId());
                    featureTableStyles.hasTableIconRelationship().should.be.equal(false);
                    geopackage.isTable(featureTableStyles.getFeatureStyleExtension().getMappingTableName(style_1.FeatureStyleExtension.TABLE_MAPPING_TABLE_ICON, featureTableName)).should.be.equal(false);
                    // Create table icon relationship
                    featureTableStyles.hasTableIconRelationship().should.be.equal(false);
                    return [4 /*yield*/, featureTableStyles.createTableIconRelationship()];
                case 4:
                    _a.sent();
                    featureTableStyles.hasTableIconRelationship().should.be.equal(true);
                    tableIconDefault = randomIcon(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setTableIconDefault(tableIconDefault)];
                case 5:
                    _a.sent();
                    pointIcon = randomIcon(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setTableIcon('Point', pointIcon)];
                case 6:
                    _a.sent();
                    geopackage.isTable(IconTable.TABLE_NAME).should.be.equal(true);
                    geopackage.isTable(featureTableStyles.getFeatureStyleExtension().getMappingTableName(style_1.FeatureStyleExtension.TABLE_MAPPING_TABLE_ICON, featureTableName)).should.be.equal(true);
                    featureStyles = featureTableStyles.getTableFeatureStyles();
                    should.exist(featureStyles);
                    should.exist(featureStyles.getStyles());
                    tableIcons = featureStyles.getIcons();
                    should.exist(tableIcons);
                    should.exist(tableIcons.getDefault());
                    tableIconDefault.getId().should.be.equal(tableIcons.getDefault().getId());
                    tableIconDefault.getId().should.be.equal(featureTableStyles.getTableIcon(null).getId());
                    pointIcon.getId().should.be.equal(featureTableStyles.getTableIcon('Point').getId());
                    featureTableStyles.hasStyleRelationship().should.be.equal(false);
                    geopackage.isTable(featureTableStyles.getFeatureStyleExtension().getMappingTableName(style_1.FeatureStyleExtension.TABLE_MAPPING_STYLE, featureTableName)).should.be.equal(false);
                    featureTableStyles.hasIconRelationship().should.be.equal(false);
                    geopackage.isTable(featureTableStyles.getFeatureStyleExtension().getMappingTableName(style_1.FeatureStyleExtension.TABLE_MAPPING_ICON, featureTableName)).should.be.equal(false);
                    types = ['Point', 'Polygon', 'LineString', 'MultiPolygon', 'MultiPoint', 'MultiLineString'];
                    // Create style and icon relationship
                    return [4 /*yield*/, featureTableStyles.createStyleRelationship()];
                case 7:
                    // Create style and icon relationship
                    _a.sent();
                    featureTableStyles.hasStyleRelationship().should.be.equal(true);
                    geopackage.isTable(featureTableStyles.getFeatureStyleExtension().getMappingTableName(style_1.FeatureStyleExtension.TABLE_MAPPING_STYLE, featureTableName)).should.be.equal(true);
                    return [4 /*yield*/, featureTableStyles.createIconRelationship()];
                case 8:
                    _a.sent();
                    featureTableStyles.hasIconRelationship().should.be.equal(true);
                    geopackage.isTable(featureTableStyles.getFeatureStyleExtension().getMappingTableName(style_1.FeatureStyleExtension.TABLE_MAPPING_ICON, featureTableName)).should.be.equal(true);
                    featureResultsStyles = {};
                    featureResultsIcons = {};
                    featureDao = geopackage.getFeatureDao(featureTableName);
                    results = featureDao.queryForAll();
                    i = 0;
                    _a.label = 9;
                case 9:
                    if (!(i < results.length)) return [3 /*break*/, 20];
                    featureRow = featureDao.createObject(results[i]);
                    featureStyle = featureTableStyles.getFeatureStyleDefaultForFeatureRow(featureRow);
                    featureStyle.getStyle().getId().should.be.equal(tableStyleDefault.getId());
                    featureStyle.getIcon().getId().should.be.equal(tableIconDefault.getId());
                    // verify that if no icon or style exist for the feature, that the default for the table is used
                    geopackage.featureStyleExtension.getStyle(featureTableName, featureRow.getId(), null, true).getId().should.be.equal(tableStyleDefault.getId());
                    geopackage.featureStyleExtension.getIcon(featureTableName, featureRow.getId(), null, true).getId().should.be.equal(tableIconDefault.getId());
                    featureRowStyles = {};
                    featureResultsStyles[featureRow.getId()] = featureRowStyles;
                    styleDefault = randomStyle(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setStyleDefaultForFeatureRow(featureRow, styleDefault)];
                case 10:
                    _a.sent();
                    featureRowStyles['null'] = styleDefault;
                    j = 0;
                    _a.label = 11;
                case 11:
                    if (!(j < types.length)) return [3 /*break*/, 14];
                    t = types[j];
                    typeStyle = randomStyle(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setStyleForFeatureRowAndGeometryType(featureRow, t, typeStyle)];
                case 12:
                    _a.sent();
                    featureRowStyles[t] = typeStyle;
                    _a.label = 13;
                case 13:
                    j++;
                    return [3 /*break*/, 11];
                case 14:
                    featureRowIcons = {};
                    featureResultsIcons[featureRow.getId()] = featureRowIcons;
                    iconDefault = randomIcon(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setIconDefaultForFeatureRow(featureRow, iconDefault)];
                case 15:
                    _a.sent();
                    featureRowIcons['null'] = iconDefault;
                    j = 0;
                    _a.label = 16;
                case 16:
                    if (!(j < types.length)) return [3 /*break*/, 19];
                    t = types[j];
                    typeIcon = randomIcon(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setIconForFeatureRowAndGeometryType(featureRow, t, typeIcon)];
                case 17:
                    _a.sent();
                    featureRowIcons[t] = typeIcon;
                    _a.label = 18;
                case 18:
                    j++;
                    return [3 /*break*/, 16];
                case 19:
                    i++;
                    return [3 /*break*/, 9];
                case 20:
                    results = featureDao.queryForAll();
                    for (i = 0; i < results.length; i++) {
                        featureRow = featureDao.createObject(results[i]);
                        featureRowId = featureRow.getId();
                        featureStyles = featureResultsStyles[featureRowId];
                        featureIcons = featureResultsIcons[featureRowId];
                        if (featureStyles) {
                            defaultStyle = featureStyles['null'];
                            if (defaultStyle) {
                                style = featureTableStyles.getStyleDefaultForFeatureRow(featureRow);
                                defaultStyle.getId().should.be.equal(style.getId());
                            }
                            for (j = 0; j < types.length; j++) {
                                t = types[j];
                                typeStyle = featureStyles[t];
                                if (typeStyle) {
                                    style = featureTableStyles.getStyleForFeatureRowAndGeometryType(featureRow, t);
                                    typeStyle.getId().should.be.equal(style.getId());
                                }
                            }
                        }
                        if (featureIcons) {
                            defaultIcon = featureIcons['null'];
                            if (defaultIcon) {
                                icon = featureTableStyles.getIconDefaultForFeatureRow(featureRow);
                                defaultIcon.getId().should.be.equal(icon.getId());
                            }
                            for (j = 0; j < types.length; j++) {
                                t = types[j];
                                typeIcon = featureIcons[t];
                                if (typeIcon) {
                                    icon = featureTableStyles.getIconForFeatureRowAndGeometryType(featureRow, t);
                                    typeIcon.getId().should.be.equal(icon.getId());
                                }
                            }
                        }
                    }
                    // test getting mappings
                    should.exist(featureTableStyles.getStyleMappingDao());
                    should.exist(featureTableStyles.getTableStyleMappingDao());
                    should.exist(featureTableStyles.getIconMappingDao());
                    should.exist(featureTableStyles.getTableIconMappingDao());
                    featureStyleExtension = geopackage.featureStyleExtension;
                    featureStyles = featureTableStyles.getFeatureStyles(featureRow.getId());
                    should.exist(featureStyles.getStyles());
                    should.exist(featureStyles.getIcons());
                    should.exist(featureStyleExtension.getFeatureStyleForFeatureRow(featureRow));
                    should.exist(featureStyleExtension.getFeatureStyleDefault(featureRow));
                    tables = featureStyleExtension.getTables();
                    tables.length.should.be.equal(1);
                    tables.indexOf(featureTableName).should.be.equal(0);
                    should.exist(featureStyleExtension.getTableStyles(featureTableName));
                    should.exist(featureStyleExtension.getTableIcons(featureTableName));
                    featureTableStyles.deleteAllFeatureStyles();
                    should.not.exist(featureStyleExtension.getTableStyles(featureTableName));
                    should.not.exist(featureStyleExtension.getTableIcons(featureTableName));
                    results = featureDao.queryForAll();
                    for (i = 0; i < results.length; i++) {
                        featureRow = featureDao.createObject(results[i]);
                        should.not.exist(featureStyleExtension.getStylesForFeatureRow(featureRow));
                        should.not.exist(featureStyleExtension.getIconsForFeatureRow(featureRow));
                        featureStyleExtension.deleteRelationships(featureTableName);
                        featureStyleExtension.has(featureTableName).should.be.equal(false);
                    }
                    featureStyleExtension.has(featureTableName).should.be.equal(false);
                    geopackage.isTable(StyleTable.TABLE_NAME).should.be.equal(true);
                    geopackage.isTable(IconTable.TABLE_NAME).should.be.equal(true);
                    geopackage.isTable(ContentsIdDao.TABLE_NAME).should.be.equal(true);
                    featureStyleExtension.removeExtension();
                    geopackage.isTable(StyleTable.TABLE_NAME).should.be.equal(false);
                    geopackage.isTable(IconTable.TABLE_NAME).should.be.equal(false);
                    geopackage.isTable(ContentsIdDao.TABLE_NAME).should.be.equal(true);
                    contentsIdExtension = featureStyleExtension.getContentsId();
                    contentsIdExtension.count().should.be.equal(1);
                    contentsIdExtension.deleteIds().should.be.equal(1);
                    contentsIdExtension.removeExtension();
                    geopackage.isTable(ContentsIdDao.TABLE_NAME).should.be.equal(false);
                    return [2 /*return*/];
            }
        });
    }); }));
    it('should test FeatureTableStyles functions', mochaAsync(function () { return __awaiter(_this, void 0, void 0, function () {
        var featureDao, results, featureRow, tableStyleDefault, tableIconDefault, featureStyles, featureStyle, styles;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // relationships do not yet exist, thus these will be null
                    should.not.exist(featureTableStyles.getAllTableStyleIds());
                    should.not.exist(featureTableStyles.getAllTableIconIds());
                    should.not.exist(featureTableStyles.getAllStyleIds());
                    should.not.exist(featureTableStyles.getAllIconIds());
                    // setup relationships
                    return [4 /*yield*/, featureTableStyles.createTableStyleRelationship()];
                case 1:
                    // setup relationships
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.createTableIconRelationship()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.createStyleRelationship()];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.createIconRelationship()];
                case 4:
                    _a.sent();
                    featureDao = geopackage.getFeatureDao(featureTableName);
                    results = featureDao.queryForAll();
                    featureRow = featureDao.createObject(results[0]);
                    tableStyleDefault = randomStyle(featureTableStyles);
                    tableIconDefault = randomIcon(featureTableStyles);
                    return [4 /*yield*/, featureTableStyles.setTableStyleDefault(tableStyleDefault)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setTableStyle('Point', tableStyleDefault)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setTableIconDefault(tableIconDefault)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setTableIcon('Point', tableIconDefault)];
                case 8:
                    _a.sent();
                    should.exist(featureTableStyles.getTableStyleDefault());
                    featureStyles = featureTableStyles.getTableFeatureStyles();
                    return [4 /*yield*/, featureTableStyles.setTableFeatureStyles(null)];
                case 9:
                    _a.sent();
                    should.not.exist(featureTableStyles.getTableStyleDefault());
                    return [4 /*yield*/, featureTableStyles.setTableFeatureStyles(featureStyles)];
                case 10:
                    _a.sent();
                    should.exist(featureTableStyles.getTableStyleDefault());
                    return [4 /*yield*/, featureTableStyles.setTableStyles(null)];
                case 11:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setTableIcons(null)];
                case 12:
                    _a.sent();
                    should.not.exist(featureTableStyles.getTableStyles());
                    should.not.exist(featureTableStyles.getTableIcons());
                    return [4 /*yield*/, featureTableStyles.setFeatureStylesForFeatureRow(featureRow, featureStyles)];
                case 13:
                    _a.sent();
                    should.exist(featureTableStyles.getFeatureStylesForFeatureRow(featureRow));
                    featureTableStyles.deleteStylesForFeatureRow(featureRow);
                    featureTableStyles.deleteIconsForFeatureRow(featureRow);
                    should.not.exist(featureTableStyles.getFeatureStylesForFeatureRow(featureRow));
                    featureStyle = new FeatureStyle(tableStyleDefault, tableIconDefault);
                    return [4 /*yield*/, featureTableStyles.setFeatureStyleForFeatureRow(featureRow, featureStyle)];
                case 14:
                    _a.sent();
                    should.exist(featureTableStyles.getFeatureStyleForFeatureRow(featureRow));
                    return [4 /*yield*/, featureTableStyles.setFeatureStyleForFeatureRow(featureRow, null)];
                case 15:
                    _a.sent();
                    should.not.exist(featureTableStyles.getFeatureStyleForFeatureRow(featureRow));
                    return [4 /*yield*/, featureTableStyles.setTableStyle('Point', tableStyleDefault)];
                case 16:
                    _a.sent();
                    should.exist(featureTableStyles.getTableStyle('Point'));
                    return [4 /*yield*/, featureTableStyles.setTableStyle('Point', null)];
                case 17:
                    _a.sent();
                    should.not.exist(featureTableStyles.getTableStyle('Point'));
                    return [4 /*yield*/, featureTableStyles.setTableIcon('Point', tableIconDefault)];
                case 18:
                    _a.sent();
                    should.exist(featureTableStyles.getTableIcon('Point'));
                    return [4 /*yield*/, featureTableStyles.setTableIcon('Point', null)];
                case 19:
                    _a.sent();
                    should.not.exist(featureTableStyles.getTableIcon('Point'));
                    return [4 /*yield*/, featureTableStyles.setTableStyleDefault(tableStyleDefault)];
                case 20:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setStyleDefaultForFeatureRow(featureRow, tableStyleDefault)];
                case 21:
                    _a.sent();
                    should.exist(featureTableStyles.getTableStyleDefault());
                    should.exist(featureTableStyles.getStyleDefaultForFeatureRow(featureRow));
                    featureTableStyles.deleteAllStyles();
                    should.not.exist(featureTableStyles.getTableStyleDefault());
                    should.not.exist(featureTableStyles.getStyleDefaultForFeatureRow(featureRow));
                    return [4 /*yield*/, featureTableStyles.setTableIconDefault(tableIconDefault)];
                case 22:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setIconDefaultForFeatureRow(featureRow, tableStyleDefault)];
                case 23:
                    _a.sent();
                    should.exist(featureTableStyles.getTableIconDefault());
                    should.exist(featureTableStyles.getIconDefaultForFeatureRow(featureRow));
                    featureTableStyles.deleteAllIcons();
                    should.not.exist(featureTableStyles.getTableIconDefault());
                    should.not.exist(featureTableStyles.getIconDefaultForFeatureRow(featureRow));
                    return [4 /*yield*/, featureTableStyles.setTableStyleDefault(tableStyleDefault)];
                case 24:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setTableIconDefault(tableIconDefault)];
                case 25:
                    _a.sent();
                    should.exist(featureTableStyles.getTableStyleDefault());
                    should.exist(featureTableStyles.getTableIconDefault());
                    featureTableStyles.deleteTableFeatureStyles();
                    should.not.exist(featureTableStyles.getTableStyleDefault());
                    should.not.exist(featureTableStyles.getTableIconDefault());
                    return [4 /*yield*/, featureTableStyles.setTableStyleDefault(tableStyleDefault)];
                case 26:
                    _a.sent();
                    should.exist(featureTableStyles.getTableStyleDefault());
                    featureTableStyles.deleteTableStyles();
                    should.not.exist(featureTableStyles.getTableStyleDefault());
                    return [4 /*yield*/, featureTableStyles.setTableIconDefault(tableIconDefault)];
                case 27:
                    _a.sent();
                    should.exist(featureTableStyles.getTableIconDefault());
                    featureTableStyles.deleteTableIcons();
                    should.not.exist(featureTableStyles.getTableIconDefault());
                    return [4 /*yield*/, featureTableStyles.setTableStyleDefault(tableStyleDefault)];
                case 28:
                    _a.sent();
                    should.exist(featureTableStyles.getTableStyleDefault());
                    featureTableStyles.deleteTableStyleDefault();
                    should.not.exist(featureTableStyles.getTableStyleDefault());
                    return [4 /*yield*/, featureTableStyles.setTableIconDefault(tableIconDefault)];
                case 29:
                    _a.sent();
                    should.exist(featureTableStyles.getTableIconDefault());
                    featureTableStyles.deleteTableIconDefault();
                    should.not.exist(featureTableStyles.getTableIconDefault());
                    return [4 /*yield*/, featureTableStyles.setTableStyleDefault(tableStyleDefault)];
                case 30:
                    _a.sent();
                    should.exist(featureTableStyles.getTableStyleDefault());
                    featureTableStyles.deleteTableStyle(null);
                    should.not.exist(featureTableStyles.getTableStyleDefault());
                    return [4 /*yield*/, featureTableStyles.setTableIconDefault(tableIconDefault)];
                case 31:
                    _a.sent();
                    should.exist(featureTableStyles.getTableIconDefault());
                    featureTableStyles.deleteTableIcon(null);
                    should.not.exist(featureTableStyles.getTableIconDefault());
                    return [4 /*yield*/, featureTableStyles.setStyleDefaultForFeatureRow(featureRow, tableStyleDefault)];
                case 32:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setIconDefaultForFeatureRow(featureRow, tableStyleDefault)];
                case 33:
                    _a.sent();
                    should.exist(featureTableStyles.getStyleDefaultForFeatureRow(featureRow));
                    should.exist(featureTableStyles.getIconDefaultForFeatureRow(featureRow));
                    featureTableStyles.deleteFeatureStyles();
                    should.not.exist(featureTableStyles.getStyleDefaultForFeatureRow(featureRow));
                    should.not.exist(featureTableStyles.getIconDefaultForFeatureRow(featureRow));
                    return [4 /*yield*/, featureTableStyles.setStyleDefaultForFeatureRow(featureRow, tableStyleDefault)];
                case 34:
                    _a.sent();
                    should.exist(featureTableStyles.getStyleDefaultForFeatureRow(featureRow));
                    featureTableStyles.deleteStyles();
                    should.not.exist(featureTableStyles.getStyleDefaultForFeatureRow(featureRow));
                    return [4 /*yield*/, featureTableStyles.setIconDefaultForFeatureRow(featureRow, tableStyleDefault)];
                case 35:
                    _a.sent();
                    should.exist(featureTableStyles.getIconDefaultForFeatureRow(featureRow));
                    featureTableStyles.deleteIcons();
                    should.not.exist(featureTableStyles.getIconDefaultForFeatureRow(featureRow));
                    return [4 /*yield*/, featureTableStyles.setFeatureStylesForFeatureRow(featureRow, null)];
                case 36:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setFeatureStyles(featureRow.getId(), null)];
                case 37:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setFeatureStyleForFeatureRow(featureRow, null)];
                case 38:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setFeatureStyleDefaultForFeatureRow(featureRow, null)];
                case 39:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setFeatureStyleForFeatureRowAndGeometryType(featureRow, null, null)];
                case 40:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setFeatureStyle(featureRow.getId(), null, null)];
                case 41:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setFeatureStyleDefault(featureRow.getId(), null)];
                case 42:
                    _a.sent();
                    should.not.exist(featureTableStyles.getFeatureStyleDefaultForFeatureRow(featureRow));
                    return [4 /*yield*/, featureTableStyles.setStylesForFeatureRow(featureRow, null)];
                case 43:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setStyles(featureRow.getId(), null)];
                case 44:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setStyleForFeatureRow(featureRow, null)];
                case 45:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setStyle(featureRow.getId(), null, null)];
                case 46:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setStyleDefault(featureRow.getId(), null)];
                case 47:
                    _a.sent();
                    should.not.exist(featureTableStyles.getStyleDefaultForFeatureRow(featureRow));
                    featureTableStyles.deleteStylesForFeatureRow(featureRow);
                    featureTableStyles.deleteStylesForFeatureId(featureRow.getId());
                    featureTableStyles.deleteStyleDefaultForFeatureRow(featureRow);
                    featureTableStyles.deleteStyleDefault(featureRow.getId());
                    featureTableStyles.deleteStyleForFeatureRow(featureRow);
                    featureTableStyles.deleteStyleForFeatureRowAndGeometryType(featureRow, null);
                    featureTableStyles.deleteStyle(featureRow.getId(), null);
                    return [4 /*yield*/, featureTableStyles.setIconsForFeatureRow(featureRow, null)];
                case 48:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setIcons(featureRow.getId(), null)];
                case 49:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setIconForFeatureRow(featureRow, null)];
                case 50:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setIcon(featureRow.getId(), null, null)];
                case 51:
                    _a.sent();
                    return [4 /*yield*/, featureTableStyles.setIconDefault(featureRow.getId(), null)];
                case 52:
                    _a.sent();
                    should.not.exist(featureTableStyles.getIconDefaultForFeatureRow(featureRow));
                    featureTableStyles.deleteIconsForFeatureRow(featureRow);
                    featureTableStyles.deleteIconsForFeatureId(featureRow.getId());
                    featureTableStyles.deleteIconDefaultForFeatureRow(featureRow);
                    featureTableStyles.deleteIconDefault(featureRow.getId());
                    featureTableStyles.deleteIconForFeatureRow(featureRow);
                    featureTableStyles.deleteIconForFeatureRowAndGeometryType(featureRow, null);
                    featureTableStyles.deleteIcon(featureRow.getId(), null);
                    featureStyles = new FeatureStyles();
                    styles = new Styles();
                    styles.setDefault(tableStyleDefault);
                    featureStyles.setStyles(styles);
                    featureTableStyles.getAllTableStyleIds().length.should.be.equal(0);
                    featureTableStyles.getAllTableIconIds().length.should.be.equal(0);
                    featureTableStyles.getAllStyleIds().length.should.be.equal(0);
                    featureTableStyles.getAllIconIds().length.should.be.equal(0);
                    return [2 /*return*/];
            }
        });
    }); }));
});
//# sourceMappingURL=testStyleExtension.js.map