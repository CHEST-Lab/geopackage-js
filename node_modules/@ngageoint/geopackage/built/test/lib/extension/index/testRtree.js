"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("../../../..");
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var rtreeIndex_1 = require("../../../../lib/extension/rtree/rtreeIndex");
var featureTableIndex_1 = require("../../../../lib/extension/index/featureTableIndex");
var rtreeIndexDao_1 = require("../../../../lib/extension/rtree/rtreeIndexDao");
var BoundingBox = require('../../../../lib/boundingBox').BoundingBox
// , testSetup = require('../../../fixtures/testSetup')
, should = require('chai').should(), path = require('path');
describe('RTree tests', function () {
    describe('Test Existing RTree', function () {
        var geoPackage;
        var featureDao;
        var originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'super.gpkg');
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('line1');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should return the index status of true', function () {
            var fti = new featureTableIndex_1.FeatureTableIndex(geoPackage, featureDao);
            var indexed = fti.isIndexed();
            fti.rtreeIndexed.should.be.equal(true);
            indexed.should.be.equal(true);
            var exists = fti.hasExtension(rtreeIndexDao_1.RTreeIndexDao.EXTENSION_NAME, fti.tableName, fti.columnName);
            exists.should.be.equal(true);
            var extensionDao = fti.extensionsDao;
            var extensions = extensionDao.queryByExtensionAndTableNameAndColumnName(rtreeIndexDao_1.RTreeIndexDao.EXTENSION_NAME, fti.tableName, fti.columnName);
            var extension = extensions[0];
            extension.author.should.be.equal('gpkg');
            extension.extensionNameNoAuthor.should.be.equal('rtree_index');
            extension.definition.should.be.equal('http://www.geopackage.org/spec/#extension_rtree');
            extension.column_name.should.be.equal('geometry');
            extension.table_name.should.be.equal('line1');
            extension.scope.should.be.equal('write-only');
            extension.extension_name.should.be.equal('gpkg_rtree_index');
        });
        it('should query the index from the geopackage api', function () {
            return __1.GeoPackage.getGeoJSONFeaturesInTile(geoPackage, 'line1', 0, 0, 0)
                .then(function (features) {
                features.length.should.be.equal(1);
            });
        });
        it('should query the index with a geometry envelope', function () {
            var e_1, _a;
            var fti = new featureTableIndex_1.FeatureTableIndex(geoPackage, featureDao);
            var bb = new BoundingBox(-105, -103, 39, 40);
            var envelope = bb.buildEnvelope();
            var iterator = fti.queryWithGeometryEnvelope(envelope);
            var count = 0;
            try {
                for (var iterator_1 = __values(iterator), iterator_1_1 = iterator_1.next(); !iterator_1_1.done; iterator_1_1 = iterator_1.next()) {
                    var feature = iterator_1_1.value;
                    count++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iterator_1_1 && !iterator_1_1.done && (_a = iterator_1.return)) _a.call(iterator_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            count.should.be.equal(1);
        });
        it('should query the index with a geometry envelope around the 180 line', function () {
            var e_2, _a;
            var fti = new featureTableIndex_1.FeatureTableIndex(geoPackage, featureDao);
            var bb = new BoundingBox(-103, -105, 39, 40);
            var envelope = bb.buildEnvelope();
            var iterator = fti.queryWithGeometryEnvelope(envelope);
            var count = 0;
            try {
                for (var iterator_2 = __values(iterator), iterator_2_1 = iterator_2.next(); !iterator_2_1.done; iterator_2_1 = iterator_2.next()) {
                    var feature = iterator_2_1.value;
                    count++;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (iterator_2_1 && !iterator_2_1.done && (_a = iterator_2.return)) _a.call(iterator_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
            count.should.be.equal(0);
        });
        it('should query the index with a geometry envelope around the 180 line and find something', function () {
            var e_3, _a;
            var fti = new featureTableIndex_1.FeatureTableIndex(geoPackage, featureDao);
            var bb = new BoundingBox(-178, -179, 39, 40);
            var envelope = bb.buildEnvelope();
            var iterator = fti.queryWithGeometryEnvelope(envelope);
            var count = 0;
            try {
                for (var iterator_3 = __values(iterator), iterator_3_1 = iterator_3.next(); !iterator_3_1.done; iterator_3_1 = iterator_3.next()) {
                    var feature = iterator_3_1.value;
                    count++;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (iterator_3_1 && !iterator_3_1.done && (_a = iterator_3.return)) _a.call(iterator_3);
                }
                finally { if (e_3) throw e_3.error; }
            }
            count.should.be.equal(1);
        });
    });
    describe('Test adding RTree to existing GeoPackage', function () {
        var geoPackage;
        var featureDao;
        var originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'rivers.gpkg');
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('FEATURESriversds');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should add the RTree extension to the GeoPackage', function () {
            var rtreeIndex = new rtreeIndex_1.RTreeIndex(geoPackage, featureDao);
            return rtreeIndex.create()
                .then(function (extension) {
                var fti = new featureTableIndex_1.FeatureTableIndex(geoPackage, featureDao);
                var indexed = fti.isIndexed();
                indexed.should.be.equal(true);
            })
                .then(function () {
                var exists = rtreeIndex.hasExtension(rtreeIndex.extensionName, rtreeIndex.tableName, rtreeIndex.columnName);
                exists.should.be.equal(true);
            })
                .then(function () {
                var extensionDao = rtreeIndex.extensionsDao;
                var extension = extensionDao.queryByExtension(rtreeIndex.extensionName);
                extension.author.should.be.equal('gpkg');
                extension.extensionNameNoAuthor.should.be.equal('rtree_index');
                extension.definition.should.be.equal('http://www.geopackage.org/spec/#extension_rtree');
                extension.column_name.should.be.equal('geom');
                extension.table_name.should.be.equal('FEATURESriversds');
                extension.scope.should.be.equal('write-only');
                extension.extension_name.should.be.equal('gpkg_rtree_index');
            });
        });
    });
});
//# sourceMappingURL=testRtree.js.map