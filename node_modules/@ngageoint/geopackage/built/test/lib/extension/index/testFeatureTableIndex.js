"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var featureTableIndex_1 = require("../../../../lib/extension/index/featureTableIndex");
var GeoPackage = require('../../../../lib/geoPackage'), sqliteQueryBuilder = require('../../../../lib/db/sqliteQueryBuilder').SqliteQueryBuilder, Verification = require('../../../fixtures/verification')
// , testSetup = require('../../../fixtures/testSetup')
, should = require('chai').should(), fs = require('fs-extra'), path = require('path');
describe('GeoPackage Feature Table Index Extension tests', function () {
    describe('Create new index', function () {
        var geoPackage;
        var featureDao;
        var originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'rivers.gpkg');
        var filename;
        beforeEach('create the GeoPackage connection', function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('FEATURESriversds');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should return the index status of false', function () {
            var fti = new featureTableIndex_1.FeatureTableIndex(geoPackage, featureDao);
            var indexed = fti.isIndexed();
            indexed.should.be.equal(false);
        });
        it('should check the index extension', function () {
            this.timeout(10000);
            var fti = featureDao.featureTableIndex;
            var tableIndex = fti.getTableIndex();
            should.not.exist(tableIndex);
            return fti.index(function (message) {
                console.log('message', message);
            })
                .then(function (indexed) {
                console.log('indexed', indexed);
                indexed.should.be.equal(true);
                // ensure it was created
                var fti2 = new featureTableIndex_1.FeatureTableIndex(geoPackage, featureDao);
                tableIndex = fti2.getTableIndex();
                should.exist(tableIndex);
                should.exist(tableIndex.last_indexed);
            })
                .then(function () {
                var exists = fti.hasExtension(fti.extensionName, fti.tableName, fti.columnName);
                exists.should.be.equal(true);
            })
                .then(function () {
                var extensionDao = fti.extensionsDao;
                var extension = extensionDao.queryByExtension(fti.extensionName);
                extension.author.should.be.equal('nga');
                extension.extensionNameNoAuthor.should.be.equal('geometry_index');
                extension.definition.should.be.equal('http://ngageoint.github.io/GeoPackage/docs/extensions/geometry-index.html');
                extension.column_name.should.be.equal('geom');
                extension.table_name.should.be.equal('FEATURESriversds');
                extension.scope.should.be.equal('read-write');
                extension.extension_name.should.be.equal('nga_geometry_index');
            })
                .then(function () {
                var extensionDao = fti.extensionsDao;
                var extensions = extensionDao.queryByExtensionAndTableName(fti.extensionName, fti.tableName);
                var extension = extensions[0];
                extension.author.should.be.equal('nga');
                extension.extensionNameNoAuthor.should.be.equal('geometry_index');
                extension.definition.should.be.equal('http://ngageoint.github.io/GeoPackage/docs/extensions/geometry-index.html');
                extension.column_name.should.be.equal('geom');
                extension.table_name.should.be.equal('FEATURESriversds');
                extension.scope.should.be.equal('read-write');
                extension.extension_name.should.be.equal('nga_geometry_index');
            })
                .then(function () {
                var extensionDao = fti.extensionsDao;
                var extensions = extensionDao.queryByExtensionAndTableNameAndColumnName(fti.extensionName, fti.tableName, fti.columnName);
                var extension = extensions[0];
                extension.author.should.be.equal('nga');
                extension.extensionNameNoAuthor.should.be.equal('geometry_index');
                extension.definition.should.be.equal('http://ngageoint.github.io/GeoPackage/docs/extensions/geometry-index.html');
                extension.column_name.should.be.equal('geom');
                extension.table_name.should.be.equal('FEATURESriversds');
                extension.scope.should.be.equal('read-write');
                extension.extension_name.should.be.equal('nga_geometry_index');
            });
        });
        it('should index the table from the geopackage object', function () {
            this.timeout(10000);
            return geoPackage.indexFeatureTable('FEATURESriversds')
                .then(function (indexed) {
                indexed.should.be.equal(true);
                // ensure it was created
                var fti = featureDao.featureTableIndex;
                var tableIndex = fti.getTableIndex();
                should.exist(tableIndex);
                should.exist(tableIndex.last_indexed);
            });
        });
        it('should index the geopackage from the geopackage object', function () {
            this.timeout(10000);
            return geoPackage.index()
                .then(function (status) {
                status.should.be.equal(true);
                // ensure it was created
                var fti = featureDao.featureTableIndex;
                var tableIndex = fti.getTableIndex();
                should.exist(tableIndex);
                should.exist(tableIndex.last_indexed);
            });
        });
    });
    describe('Test existing index', function () {
        var geoPackage;
        var featureDao;
        var originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'rivers_indexed.gpkg');
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('rivers');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should query for the index row rivers, 315', function (done) {
            var whereString = 'table_name = ? and geom_id = ?';
            var whereArgs = ['rivers', 315];
            var query = sqliteQueryBuilder.buildQuery(false, "'nga_geometry_index'", undefined, whereString);
            var result = geoPackage.database.get(query, whereArgs);
            should.exist(result);
            done();
        });
        it('should get the extension row', function () {
            var fti = featureDao.featureTableIndex;
            var extension = fti.getFeatureTableIndexExtension();
            should.exist(extension);
        });
        it('should return the index status of true', function () {
            var fti = featureDao.featureTableIndex;
            var indexed = fti.isIndexed();
            indexed.should.be.equal(true);
        });
        it('should force index the table', function () {
            this.timeout(30000);
            var fti = featureDao.featureTableIndex;
            var tableIndex = fti.getTableIndex();
            tableIndex.last_indexed.should.be.equal('2016-05-02T12:08:14.144Z');
            return fti.indexWithForce(true)
                .then(function (indexed) {
                indexed.should.be.equal(true);
                // ensure it was created
                var fti2 = new featureTableIndex_1.FeatureTableIndex(geoPackage, featureDao);
                tableIndex = fti2.getTableIndex();
                should.exist(tableIndex);
                tableIndex.last_indexed.should.not.be.equal('2016-05-02T12:08:14.144Z');
            });
        });
    });
});
//# sourceMappingURL=testFeatureTableIndex.js.map