"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../fixtures/testSetup"));
var Verification = require('../fixtures/verification'), TileTable = require('../../lib/tiles/user/tileTable').TileTable, BoundingBox = require('../../lib/boundingBox').BoundingBox, path = require('path'), should = require('chai').should();
describe('GeoPackage Tile table create tests', function () {
    var testGeoPackage;
    var tableName = 'test_tiles.test';
    var geopackage;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createTmpGeoPackage()];
                    case 1:
                        created = _a.sent();
                        testGeoPackage = created.path;
                        geopackage = created.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testGeoPackage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create a tile table', function () {
        var requiredColumns = TileTable.createRequiredColumns();
        var tileTable = new TileTable(tableName, requiredColumns);
        var result = geopackage.createTileTable(tileTable);
        Verification.verifyTableExists(geopackage, tableName).should.be.equal(true);
    });
    it('should create a tile table with parameters', function () {
        var contentsBoundingBox = new BoundingBox(-180, 180, -80, 80);
        var contentsSrsId = 4326;
        var tileMatrixSetBoundingBox = new BoundingBox(-180, 180, -80, 80);
        var tileMatrixSetSrsId = 4326;
        return geopackage.createTileTableWithTableName(tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId)
            .then(function (result) {
            Verification.verifyTileMatrixSet(geopackage).should.be.equal(true);
            Verification.verifyContentsForTable(geopackage, tableName).should.be.equal(true);
            Verification.verifyTableExists(geopackage, tableName).should.be.equal(true);
        });
    });
    describe('GeoPackage tile create tile matrix tests', function (done) {
        var tileMatrixSet;
        var tileMatrixSetBoundingBox = new BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
        beforeEach(function () {
            var contentsBoundingBox = new BoundingBox(-180, 180, -85.0511287798066, 85.0511287798066);
            var contentsSrsId = 4326;
            var tileMatrixSetSrsId = 3857;
            geopackage.spatialReferenceSystemDao.createWebMercator();
            return geopackage.createTileTableWithTableName(tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId)
                .then(function (result) {
                tileMatrixSet = result;
                Verification.verifyTileMatrixSet(geopackage).should.be.equal(true);
                Verification.verifyContentsForTable(geopackage, tableName).should.be.equal(true);
                Verification.verifyTableExists(geopackage, tableName).should.be.equal(true);
            });
        });
        it('should create the standard xyz tile matrix for the zoom levels with default tile size of 256', function () {
            geopackage.createStandardWebMercatorTileMatrix(tileMatrixSetBoundingBox, tileMatrixSet, 0, 3);
            var zoom = 4;
            while (zoom-- > 0) {
                var matrix = geopackage.tileMatrixDao.queryForId([tableName, zoom]);
                var numTiles = Math.pow(2, zoom);
                matrix.table_name.should.equal(tableName);
                matrix.zoom_level.should.equal(zoom);
                matrix.matrix_width.should.equal(Math.pow(2, zoom));
                matrix.matrix_height.should.equal(Math.pow(2, zoom));
                matrix.tile_width.should.equal(256);
                matrix.tile_height.should.equal(256);
                var metersPerTile = (tileMatrixSetBoundingBox.maxLongitude - tileMatrixSetBoundingBox.minLongitude) / numTiles;
                matrix.pixel_x_size.should.equal(metersPerTile / 256);
                matrix.pixel_y_size.should.equal(metersPerTile / 256);
            }
        });
        it('should create the standard xyz tile matrix for the zoom levels with a custom tile size', function () {
            geopackage.createStandardWebMercatorTileMatrix(tileMatrixSetBoundingBox, tileMatrixSet, 0, 3, 100);
            var zoom = 4;
            while (zoom-- > 0) {
                var matrix = geopackage.tileMatrixDao.queryForId([tableName, zoom]);
                var numTiles = Math.pow(2, zoom);
                matrix.table_name.should.equal(tableName);
                matrix.zoom_level.should.equal(zoom);
                matrix.matrix_width.should.equal(Math.pow(2, zoom));
                matrix.matrix_height.should.equal(Math.pow(2, zoom));
                matrix.tile_width.should.equal(100);
                matrix.tile_height.should.equal(100);
                var metersPerTile = (tileMatrixSetBoundingBox.maxLongitude - tileMatrixSetBoundingBox.minLongitude) / numTiles;
                matrix.pixel_x_size.should.equal(metersPerTile / 100);
                matrix.pixel_y_size.should.equal(metersPerTile / 100);
            }
        });
        it('should add all of the tiles to the tile matrix', function () {
            geopackage.createStandardWebMercatorTileMatrix(tileMatrixSetBoundingBox, tileMatrixSet, 0, 3);
            var zooms = [0, 1, 2, 3];
            return zooms.reduce(function (zoomSequence, zoom) {
                return zoomSequence.then(function () {
                    var xtiles = [];
                    var tileCount = Math.pow(2, zoom);
                    for (var i = 0; i < tileCount; i++) {
                        xtiles.push(i);
                    }
                    return xtiles.reduce(function (xSequence, x) {
                        return xSequence.then(function () {
                            var ytiles = [];
                            var tileCount = Math.pow(2, zoom);
                            for (var i = 0; i < tileCount; i++) {
                                ytiles.push(i);
                            }
                            return ytiles.reduce(function (ySequence, y) {
                                return ySequence.then(function () {
                                    return new Promise(function (resolve, reject) {
                                        return __awaiter(this, void 0, void 0, function () {
                                            var image;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, loadTile(path.join(__dirname, '..', 'fixtures', 'tiles', zoom.toString(), x.toString(), y.toString() + '.png'))];
                                                    case 1:
                                                        image = _a.sent();
                                                        console.log('Adding tile z: %s x: %s y: %s to %s', zoom, x, y, tableName);
                                                        resolve(geopackage.addTile(image, tableName, zoom, y, x));
                                                        return [2 /*return*/];
                                                }
                                            });
                                        });
                                    });
                                });
                            }, Promise.resolve());
                        });
                    }, Promise.resolve());
                });
            }, Promise.resolve());
        });
    });
    describe('delete tile tests', function (done) {
        var tileMatrixSet;
        var tileMatrixSetBoundingBox = new BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
        beforeEach(function () {
            this.timeout(5000);
            var contentsBoundingBox = new BoundingBox(-180, 180, -85.0511287798066, 85.0511287798066);
            var contentsSrsId = 4326;
            var tileMatrixSetSrsId = 3857;
            geopackage.spatialReferenceSystemDao.createWebMercator();
            return geopackage.createTileTableWithTableName(tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId)
                .then(function (result) {
                tileMatrixSet = result;
                Verification.verifyTileMatrixSet(geopackage).should.be.equal(true);
                Verification.verifyContentsForTable(geopackage, tableName).should.be.equal(true);
                Verification.verifyTableExists(geopackage, tableName).should.be.equal(true);
                geopackage.createStandardWebMercatorTileMatrix(tileMatrixSetBoundingBox, tileMatrixSet, 0, 3);
                var zooms = [0, 1, 2, 3];
                return zooms.reduce(function (zoomSequence, zoom) {
                    return zoomSequence.then(function () {
                        var xtiles = [];
                        var tileCount = Math.pow(2, zoom);
                        for (var i = 0; i < tileCount; i++) {
                            xtiles.push(i);
                        }
                        return xtiles.reduce(function (xSequence, x) {
                            return xSequence.then(function () {
                                var ytiles = [];
                                var tileCount = Math.pow(2, zoom);
                                for (var i = 0; i < tileCount; i++) {
                                    ytiles.push(i);
                                }
                                return ytiles.reduce(function (ySequence, y) {
                                    return ySequence.then(function () {
                                        return new Promise(function (resolve, reject) {
                                            return __awaiter(this, void 0, void 0, function () {
                                                var image;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, loadTile(path.join(__dirname, '..', 'fixtures', 'tiles', zoom.toString(), x.toString(), y.toString() + '.png'))];
                                                        case 1:
                                                            image = _a.sent();
                                                            console.log('Adding tile z: %s x: %s y: %s to %s', zoom, x, y, tableName);
                                                            resolve(geopackage.addTile(image, tableName, zoom, y, x));
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            });
                                        });
                                    });
                                }, Promise.resolve());
                            });
                        }, Promise.resolve());
                    });
                }, Promise.resolve());
            });
        });
        it('should delete the tiles', function () {
            var tileDao = geopackage.getTileDao(tableName);
            var count = tileDao.getCount();
            count.should.be.equal(85);
            var result = tileDao.deleteTile(0, 0, 0);
            result.should.be.equal(1);
            count = tileDao.getCount();
            count.should.be.equal(84);
            var result = tileDao.dropTable();
            result.should.be.equal(true);
        });
    });
});
//# sourceMappingURL=testTileCreate.js.map