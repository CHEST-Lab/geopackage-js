"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../fixtures/testSetup"));
var tableCreator_1 = require("../../../lib/db/tableCreator");
var TileTable = require('../../../lib/tiles/user/tileTable').TileTable, SetupFeatureTable = require('../../fixtures/setupFeatureTable.js'), Verification = require('../../fixtures/verification'), wkb = require('../../../lib/wkb/index').WKB, should = require('chai').should(), path = require('path');
describe('TableCreator tests', function () {
    var testGeoPackage = path.join(__dirname, '..', '..', 'fixtures', 'tmp', testSetup_1.default.createTempName());
    var geopackage;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createBareGeoPackage(testGeoPackage)];
                    case 1:
                        geopackage = _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geopackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testGeoPackage)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create the spatial reference system table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createSpatialReferenceSystem()
            .then(function (result) {
            result.should.be.equal(true);
            var verified = Verification.verifySRS(geopackage);
            verified.should.be.equal(true);
        });
    });
    it('should create the contents table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createContents()
            .then(function (result) {
            result.should.be.equal(true);
            var verified = Verification.verifyContents(geopackage);
            verified.should.be.equal(true);
        });
    });
    it('should create the geometry columns table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createGeometryColumns()
            .then(function (result) {
            result.should.be.equal(true);
            var verified = Verification.verifyGeometryColumns(geopackage);
            verified.should.be.equal(true);
        });
    });
    it('should create the tile matrix set table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createTileMatrixSet()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyTileMatrixSet(geopackage).should.be.equal(true);
        });
    });
    it('should create the tile matrix table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createTileMatrix()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyTileMatrix(geopackage).should.be.equal(true);
        });
    });
    it('should create the data columns table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createDataColumns()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyDataColumns(geopackage).should.be.equal(true);
        });
    });
    it('should create the data column constraints table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createDataColumnConstraints()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyDataColumnConstraints(geopackage).should.be.equal(true);
        });
    });
    it('should create the metadata table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createMetadata()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyMetadata(geopackage).should.be.equal(true);
        });
    });
    it('should create the metadata reference', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createMetadataReference()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyMetadataReference(geopackage).should.be.equal(true);
        });
    });
    it('should create the extensions table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createExtensions()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyExtensions(geopackage).should.be.equal(true);
        });
    });
    it('should create the table index table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createTableIndex()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyTableIndex(geopackage).should.be.equal(true);
        });
    });
    it('should create the geometry index table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createGeometryIndex()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyGeometryIndex(geopackage).should.be.equal(true);
        });
    });
    it('should create the feature tile link table', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        return tc.createFeatureTileLink()
            .then(function (result) {
            result.should.be.equal(true);
            Verification.verifyFeatureTileLink(geopackage).should.be.equal(true);
        });
    });
    it('should create the required tables', function () {
        var tc = new tableCreator_1.TableCreator(geopackage);
        tc.createRequired()
            .then(function (result) {
            Verification.verifyContents(geopackage).should.be.equal(true);
            Verification.verifySRS(geopackage).should.be.equal(true);
            var count = geopackage.database.count('gpkg_spatial_ref_sys');
            count.should.be.equal(4);
        });
    });
    it('should create a user tile table', function (done) {
        var columns = TileTable.createRequiredColumns();
        var tileTable = new TileTable('test_tiles', columns);
        var tc = new tableCreator_1.TableCreator(geopackage);
        var result = tc.createUserTable(tileTable);
        should.exist(result);
        Verification.verifyTableExists(geopackage, 'test_tiles').should.be.equal(true);
        done();
    });
    it('should create a user feature table', function (done) {
        var featureTable = SetupFeatureTable.buildFeatureTable('test_features', 'geom', wkb.typeMap.wkt.Point);
        var tc = new tableCreator_1.TableCreator(geopackage);
        var result = tc.createUserTable(featureTable);
        Verification.verifyTableExists(geopackage, 'test_features').should.be.equal(true);
        done();
    });
});
//# sourceMappingURL=testTableCreator.js.map