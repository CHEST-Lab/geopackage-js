"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../fixtures/testSetup"));
var fs = require('fs-extra');
var path = require('path');
var testDb;
describe('Database opening tests', function (done) {
    function verifyTableExists(db) {
        var statement = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name=?");
        var results = statement.get(['mytable']);
        if (!results) {
            return false;
        }
        return true;
    }
    function createTable(db, done) {
        var create = 'CREATE TABLE mytable (' +
            '  name TEXT NOT NULL,' +
            '  id INTEGER NOT NULL PRIMARY KEY,' +
            '  description TEXT' +
            ')';
        try {
            var statement = db.prepare(create);
            statement.run();
            done();
        }
        catch (e) {
            done(e);
        }
    }
    var db;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createTmpGeoPackage()];
                    case 1:
                        created = _a.sent();
                        testDb = created.path;
                        db = created.geopackage.database.getDBConnection();
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testDb)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should load a file synchronusly then write to the db', function (done) {
        createTable(db, function (err, results) {
            var exists = verifyTableExists(db);
            if (!exists)
                return done(new Error('Table does not exist'));
            var buffer = fs.readFileSync(path.join(__dirname, '..', '..', 'fixtures', 'tiles', '0', '0', '0.png'));
            exists = verifyTableExists(db);
            if (!exists)
                return done(new Error('Table does not exist after file read'));
            return done();
        });
    });
    it('should load a file asynchronusly then write to the db', function (done) {
        createTable(db, function (err, results) {
            var exists = verifyTableExists(db);
            if (!exists)
                return done(new Error('Table does not exist'));
            fs.readFile(path.join(__dirname, '..', '..', 'fixtures', 'tiles', '0', '0', '0.png'), function (err, buffer) {
                exists = verifyTableExists(db);
                if (!exists)
                    return done(new Error('Table does not exist after file read'));
                return done();
            });
        });
    });
});
//# sourceMappingURL=testBetterSqlite.js.map