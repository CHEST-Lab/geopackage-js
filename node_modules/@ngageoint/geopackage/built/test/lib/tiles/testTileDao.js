"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../fixtures/testSetup"));
var TileDao = require('../../../lib/tiles/user/tileDao').TileDao
// , testSetup = require('../../fixtures/testSetup')
, should = require('chai').should(), path = require('path');
describe('TileDao tests', function () {
    describe('Rivers GeoPackage tests', function () {
        var geoPackage;
        var tileDao;
        var filename;
        beforeEach('create the GeoPackage connection', function () {
            return __awaiter(this, void 0, void 0, function () {
                var originalFilename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            originalFilename = path.join(__dirname, '..', '..', 'fixtures', 'rivers.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            tileDao = geoPackage.getTileDao('TILESosmds');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('close the geopackage connection', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the zoom levels', function (done) {
            tileDao.minZoom.should.be.equal(0);
            tileDao.maxZoom.should.be.equal(3);
            done();
        });
        it('should get the bounding box for each zoom level', function () {
            [0, 1, 2, 3, 4].forEach(function (zoom) {
                var bb = tileDao.getBoundingBoxWithZoomLevel(zoom);
                if (zoom === 4) {
                    should.not.exist(bb);
                }
                else {
                    bb.minLongitude.should.be.equal(-20037508.342789244);
                    bb.maxLongitude.should.be.equal(20037508.342789244);
                    bb.minLatitude.should.be.equal(-20037508.342789244);
                    bb.maxLatitude.should.be.equal(20037508.342789244);
                }
            });
        });
        it('should get the tile grid for each zoom level', function () {
            [0, 1, 2, 3, 4].forEach(function (zoom) {
                var grid = tileDao.getTileGridWithZoomLevel(zoom);
                if (zoom === 4) {
                    should.not.exist(grid);
                }
                else {
                    grid.min_x.should.be.equal(0);
                    grid.min_y.should.be.equal(0);
                    grid.max_x.should.be.equal(Math.pow(2, zoom) - 1);
                    grid.max_x.should.be.equal(Math.pow(2, zoom) - 1);
                }
            });
        });
        it('should get the table', function () {
            var tileTable = tileDao.getTileTable();
            tileTable.table_name.should.be.equal('TILESosmds');
            should.exist(tileTable.getTileDataColumn);
        });
        it('should query for a tile', function () {
            var tileRow = tileDao.queryForTile(0, 0, 0);
            tileRow.zoomLevel.should.be.equal(0);
            tileRow.tileColumn.should.be.equal(0);
            tileRow.row.should.be.equal(0);
            var data = tileRow.tileData;
            should.exist(data);
        });
        it('should query for tiles in the zoom level', function () {
            var e_1, _a;
            var count = 0;
            try {
                for (var _b = __values(tileDao.queryForTilesWithZoomLevel(1)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tileRow = _c.value;
                    tileRow.zoomLevel.should.be.equal(1);
                    var data = tileRow.tileData;
                    should.exist(data);
                    count++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            count.should.be.equal(4);
        });
        it('should query for tiles in the zoom level descending order', function () {
            var e_2, _a;
            var count = 0;
            try {
                for (var _b = __values(tileDao.queryForTilesDescending(1)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tileRow = _c.value;
                    tileRow.zoomLevel.should.be.equal(1);
                    var data = tileRow.tileData;
                    should.exist(data);
                    count++;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            count.should.be.equal(4);
        });
        it('should query for tiles in the zoom level and column', function () {
            var e_3, _a;
            var count = 0;
            try {
                for (var _b = __values(tileDao.queryForTilesInColumn(1, 1)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tileRow = _c.value;
                    tileRow.zoomLevel.should.be.equal(1);
                    tileRow.tileColumn.should.be.equal(1);
                    var data = tileRow.tileData;
                    should.exist(data);
                    count++;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            count.should.be.equal(2);
        });
        it('should query for tiles in the zoom level and row', function () {
            var e_4, _a;
            var count = 0;
            try {
                for (var _b = __values(tileDao.queryForTilesInRow(1, 1)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tileRow = _c.value;
                    tileRow.zoomLevel.should.be.equal(1);
                    tileRow.row.should.be.equal(1);
                    var data = tileRow.tileData;
                    should.exist(data);
                    count++;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            count.should.be.equal(2);
        });
        it('should query for tiles in the tile grid', function () {
            var e_5, _a;
            var tileGrid = {
                min_x: 0,
                max_x: 1,
                min_y: 0,
                max_y: 0
            };
            var iterator = tileDao.queryByTileGrid(tileGrid, 1);
            var count = 0;
            try {
                for (var iterator_1 = __values(iterator), iterator_1_1 = iterator_1.next(); !iterator_1_1.done; iterator_1_1 = iterator_1.next()) {
                    var tileRow = iterator_1_1.value;
                    tileRow.zoomLevel.should.be.equal(1);
                    tileRow.row.should.be.equal(0);
                    var data = tileRow.tileData;
                    should.exist(data);
                    count++;
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (iterator_1_1 && !iterator_1_1.done && (_a = iterator_1.return)) _a.call(iterator_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
            count.should.be.equal(2);
        });
        it('should rename the tile table', function () {
            tileDao.rename('Tiles');
            tileDao.gpkgTableName.should.be.equal('Tiles');
            var tileTables = geoPackage.getTileTables();
            tileTables[0].should.be.equal('Tiles');
        });
    });
    describe.skip('Alaska GeoPackage tests', function () {
        var geoPackage;
        var tileDao;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var filename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filename = path.join(__dirname, '..', '..', 'fixtures', 'private', 'alaska.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(filename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            tileDao = geoPackage.getTileDao('alaska');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the zoom levels', function () {
            tileDao.minZoom.should.be.equal(4);
            tileDao.maxZoom.should.be.equal(4);
        });
        it('should get the bounding box for each zoom level', function () {
            [4, 5].forEach(function (zoom) {
                var bb = tileDao.getBoundingBoxWithZoomLevel(zoom);
                if (zoom === 5) {
                    should.not.exist(bb);
                }
                else {
                    bb.minLongitude.should.be.equal(-180);
                    bb.maxLongitude.should.be.equal(-157.5);
                    bb.minLatitude.should.be.equal(45);
                    bb.maxLatitude.should.be.equal(67.5);
                }
            });
        });
        it('should get the tile grid for each zoom level', function () {
            [4, 5].forEach(function (zoom) {
                var grid = tileDao.getTileGridWithZoomLevel(zoom);
                if (zoom === 5) {
                    should.not.exist(grid);
                }
                else {
                    grid.minX.should.be.equal(0);
                    grid.minY.should.be.equal(0);
                    grid.maxX.should.be.equal(3);
                    grid.maxX.should.be.equal(3);
                }
            });
        });
        it('should get the table', function () {
            var tileTable = tileDao.getTileTable();
            tileTable.tableName.should.be.equal('alaska');
            should.exist(tileTable.getTileDataColumn);
        });
        it('should query for a tile', function () {
            return tileDao.queryForTile(1, 1, 4)
                .then(function (tileRow) {
                tileRow.zoomLevel.should.be.equal(4);
                tileRow.tileColumn.should.be.equal(1);
                tileRow.row.should.be.equal(1);
                var data = tileRow.tileData;
                should.exist(data);
            });
        });
        it('should query for tiles in the zoom level', function () {
            return tileDao.queryForTilesWithZoomLevel(4, function (err, tileRow) {
                tileRow.zoomLevel.should.be.equal(4);
                var data = tileRow.tileData;
                should.exist(data);
            }).then(function (count) {
                count.should.be.equal(16);
            });
        });
        it('should query for tiles in the zoom level descending order', function () {
            tileDao.queryForTilesDescending(4, function (err, tileRow) {
                tileRow.zoomLevel.should.be.equal(4);
                var data = tileRow.tileData;
                should.exist(data);
            }).then(function (count) {
                count.should.be.equal(16);
            });
        });
        it('should query for tiles in the zoom level and column', function () {
            return tileDao.queryForTilesInColumn(1, 4, function (err, tileRow) {
                tileRow.zoomLevel.should.be.equal(4);
                tileRow.tileColumn.should.be.equal(1);
                var data = tileRow.tileData;
                should.exist(data);
            }).then(function (count) {
                count.should.be.equal(4);
            });
        });
        it('should query for tiles in the zoom level and row', function () {
            return tileDao.queryForTilesInRow(1, 4, function (err, tileRow) {
                tileRow.zoomLevel.should.be.equal(4);
                tileRow.row.should.be.equal(1);
                var data = tileRow.tileData;
                should.exist(data);
            }).then(function (count) {
                count.should.be.equal(4);
            });
        });
        it('should query for tiles in the tile grid', function (done) {
            var tileGrid = {
                minX: 0,
                maxX: 1,
                minY: 0,
                maxY: 0
            };
            tileDao.queryByTileGrid(tileGrid, 4, function (err, tileRow) {
                tileRow.zoomLevel.should.be.equal(4);
                tileRow.row.should.be.equal(0);
                var data = tileRow.tileData;
                should.exist(data);
            })
                .then(function (count) {
                count.should.be.equal(2);
                done();
            });
        });
    });
});
//# sourceMappingURL=testTileDao.js.map