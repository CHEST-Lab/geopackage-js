"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("../../../..");
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var FeatureTiles = require('../../../../lib/tiles/features').FeatureTiles, FeatureTilePointIcon = require('../../../../lib/tiles/features/featureTilePointIcon').FeatureTilePointIcon, NumberFeaturesTile = require('../../../../lib/tiles/features/custom/numberFeaturesTile').NumberFeaturesTile, ShadedFeaturesTile = require('../../../../lib/tiles/features/custom/shadedFeaturesTile').ShadedFeaturesTile, ImageUtils = require('../../../../lib/tiles/imageUtils').ImageUtils
// , GeoPackageAPI = require('../../../..')
// , testSetup = require('../../../fixtures/testSetup')
, fs = require('fs-extra'), should = require('chai').should(), path = require('path');
var isWeb = !(typeof (process) !== 'undefined' && process.version);
var isLinux = process.platform === 'linux';
describe('GeoPackage FeatureTiles tests', function () {
    describe('Rivers GeoPackage tests', function () {
        var geoPackage;
        var featureDao;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var originalFilename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'rivers.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('FEATURESriversds');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the x: 1, y: 0, z: 1 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(1, 0, 1)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '1_1_0.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 0, y: 0, z: 0 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(0, 0, 0)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '0_0_0.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 1, y: 0, z: 1 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('Generating non indexed tiles');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'FEATURESriversds', 1, 0, 1, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('Generating non indexed tiles');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '1_1_0.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 8, y: 12, z: 5 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('Generating non indexed tiles');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'FEATURESriversds', 8, 12, 5, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('Generating non indexed tiles');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '5_8_12.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
    });
    describe('Indexed Rivers GeoPackage tests', function () {
        var geoPackage;
        var featureDao;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var indexedfilename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            indexedfilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'rivers_indexed.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(indexedfilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('rivers');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the x: 1, y: 0, z: 1 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(1, 0, 1)
                .then(function (imageStream) {
                testSetup_1.default.diffImages(imageStream, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '1_1_0_indexed.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 1, y: 0, z: 1 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('generating indexed tile');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'rivers', 1, 0, 1, 256, 256)
                .then(function (data) {
                console.timeEnd('generating indexed tile');
                should.exist(data);
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '1_1_0_indexed.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 0, y: 0, z: 0 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('generating indexed tile');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'rivers', 0, 0, 0, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('generating indexed tile');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '0_0_0_indexed.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 8, y: 12, z: 5 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('generating indexed tile');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'rivers', 8, 12, 5, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('generating indexed tile');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '5_8_12_indexed.png'), function (err, equal) {
                    fs.writeFileSync('/tmp/5_8_12_indexed.png', data);
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
    });
    describe('Styled GeoPackage tests', function () {
        var geoPackage;
        var featureDao;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var originalFilename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'styled.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('Drawing Layer 1');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the x: 153631, y: 91343, z: 18 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(153631, 91343, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153631_91343_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153632, y: 91342, z: 18 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(153632, 91342, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91342_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153632, y: 91343, z: 18 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(153632, 91343, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91343_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153633, y: 91342, z: 18 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(153633, 91342, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153633_91342_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153633, y: 91343, z: 18 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(153633, 91343, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153633_91343_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153631, y: 91343, z: 18 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('Generating non indexed tiles');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'Drawing Layer 1', 153631, 91343, 18, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('Generating non indexed tiles');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153631_91343_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153632, y: 91342, z: 18 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('Generating non indexed tiles');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'Drawing Layer 1', 153632, 91342, 18, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('Generating non indexed tiles');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91342_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153632, y: 91343, z: 18 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('Generating non indexed tiles');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'Drawing Layer 1', 153632, 91343, 18, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('Generating non indexed tiles');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91343_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153633, y: 91342, z: 18 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('Generating non indexed tiles');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'Drawing Layer 1', 153633, 91342, 18, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('Generating non indexed tiles');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153633_91342_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153633, y: 91343, z: 18 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('Generating non indexed tiles');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'Drawing Layer 1', 153633, 91343, 18, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('Generating non indexed tiles');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153633_91343_18.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153632, y: 91343, z: 18 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ImageUtils.getImage(path.join(__dirname, '..', '..', '..', 'fixtures', 'marker-icon.png')).then(function (image) {
                var ftpi = new FeatureTilePointIcon(image);
                ftpi.setWidth(ftpi.getWidth());
                ftpi.setHeight(ftpi.getHeight());
                ftpi.setXOffset(0);
                ftpi.setYOffset(0);
                ftpi.pinIconCenter();
                ft.setPointIcon(ftpi);
                ft.calculateDrawOverlap();
                ft.drawTile(153632, 91343, 18)
                    .then(function (image) {
                    testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91343_18_styled_with_icon.png'), function (err, equal) {
                        equal.should.be.equal(true);
                        done();
                    });
                });
            });
        });
    });
    describe('Styled With Icon GeoPackage tests', function () {
        var geoPackage;
        var featureDao;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var originalFilename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'styled_with_icon.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('Drawing Layer 1');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the x: 153632, y: 91343, z: 18 tile', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.drawTile(153632, 91343, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91343_18_styled_with_icon.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153632, y: 91343, z: 18 tile from the GeoPackage api', function (done) {
            this.timeout(30000);
            console.time('Generating non indexed tiles');
            __1.GeoPackage.getFeatureTileFromXYZ(geoPackage, 'Drawing Layer 1', 153632, 91343, 18, 256, 256)
                .then(function (data) {
                should.exist(data);
                console.timeEnd('Generating non indexed tiles');
                testSetup_1.default.diffImages(data, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91343_18_styled_with_icon.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
    });
    describe('FeatureTile tests', function () {
        var geoPackage;
        var featureDao;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var originalFilename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'styled_scaled.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            featureDao = geoPackage.getFeatureDao('Drawing Layer 1');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the x: 153632, y: 91343, z: 18 tile and scale the styles', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            should.exist(ft.getFeatureDao());
            should.exist(ft.getFeatureTableStyles());
            var featureTableStyles = ft.getFeatureTableStyles();
            ft.setFeatureTableStyles(null);
            should.not.exist(ft.getFeatureTableStyles());
            ft.setFeatureTableStyles(featureTableStyles);
            ft.setScale(0.5);
            ft.getScale().should.be.equal(0.5);
            ft.setTileHeight(256);
            ft.getTileHeight().should.be.equal(256);
            ft.setTileWidth(256);
            ft.getTileWidth().should.be.equal(256);
            var widthDrawOverlap = ft.getWidthDrawOverlap();
            var heightDrawOverlap = ft.getHeightDrawOverlap();
            ft.setWidthDrawOverlap(0);
            ft.setHeightDrawOverlap(0);
            ft.getWidthDrawOverlap().should.be.equal(0);
            ft.getHeightDrawOverlap().should.be.equal(0);
            ft.setWidthDrawOverlap(widthDrawOverlap);
            ft.setHeightDrawOverlap(heightDrawOverlap);
            ft.drawTile(153632, 91343, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91343_18_scaled.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it.skip('should get the x: 153632, y: 91343, z: 18 tile without styling', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.ignoreFeatureTableStyles();
            ft.clearCache();
            ft.setStylePaintCacheSize(100);
            ft.setIconCacheSize(100);
            ft.setCompressFormat('jpeg');
            ft.getCompressFormat().should.be.equal('jpeg');
            ft.setCompressFormat('png');
            ft.setDrawOverlap(0);
            ft.calculateDrawOverlap();
            ft.drawTile(153632, 91343, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91343_18_styles_ignored.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the x: 153632, y: 91343, z: 18 tile with modified default styling', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.ignoreFeatureTableStyles();
            ft.setFillPolygon(true);
            ft.isFillPolygon().should.be.equal(true);
            should.not.exist(ft.getPointIcon());
            ft.setLineColor('#FF0000FF');
            ft.getLineColor().should.be.equal('#FF0000FF');
            ft.setLineStrokeWidth(5);
            ft.getLineStrokeWidth().should.be.equal(5);
            ft.setPointColor('#FF0000FF');
            ft.getPointColor().should.be.equal('#FF0000FF');
            ft.setPointRadius(5);
            ft.getPointRadius().should.be.equal(5);
            ft.setPolygonColor('#FF0000FF');
            ft.getPolygonColor().should.be.equal('#FF0000FF');
            ft.setPolygonFillColor('#00FF00FF');
            ft.getPolygonFillColor().should.be.equal('#00FF00FF');
            ft.setPolygonStrokeWidth(5);
            ft.getPolygonStrokeWidth().should.be.equal(5);
            ft.drawTile(153632, 91343, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', '153632_91343_18_default_style_modified.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the max feature number tile and test various functions', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.setMaxFeaturesPerTile(1);
            ft.getMaxFeaturesPerTile().should.be.equal(1);
            should.not.exist(ft.getMaxFeaturesTileDraw());
            var numberFeaturesTile = new NumberFeaturesTile();
            numberFeaturesTile.getCircleColor().should.be.equal("rgba(0, 0, 0, 0.25)");
            numberFeaturesTile.setCircleColor("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.getCircleColor().should.be.equal("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.setCircleColor("rgba(0, 0, 0, 0.25)");
            numberFeaturesTile.getCircleFillColor().should.be.equal("rgba(0, 0, 0, 1.0)");
            numberFeaturesTile.setCircleFillColor("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.getCircleFillColor().should.be.equal("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.setCircleFillColor("rgba(0, 0, 0, 1.0)");
            numberFeaturesTile.getTextSize().should.be.equal(18);
            numberFeaturesTile.setTextSize(12);
            numberFeaturesTile.getTextSize().should.be.equal(12);
            numberFeaturesTile.setTextSize(18);
            numberFeaturesTile.getTextColor().should.be.equal("rgba(255, 255, 255, 1.0)");
            numberFeaturesTile.setTextColor("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.getTextColor().should.be.equal("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.setTextColor("rgba(255, 255, 255, 1.0)");
            numberFeaturesTile.getCircleStrokeWidth().should.be.equal(3);
            numberFeaturesTile.setCircleStrokeWidth(12);
            numberFeaturesTile.getCircleStrokeWidth().should.be.equal(12);
            numberFeaturesTile.setCircleStrokeWidth(3);
            numberFeaturesTile.getCirclePaddingPercentage().should.be.equal(0.25);
            numberFeaturesTile.setCirclePaddingPercentage(0.5);
            numberFeaturesTile.getCirclePaddingPercentage().should.be.equal(0.5);
            (function () {
                numberFeaturesTile.setCirclePaddingPercentage(2);
            }).should.throw("Circle padding percentage must be between 0.0 and 1.0: " + 2);
            numberFeaturesTile.setCirclePaddingPercentage(0.25);
            numberFeaturesTile.getTileBorderStrokeWidth().should.be.equal(2);
            numberFeaturesTile.setTileBorderStrokeWidth(12);
            numberFeaturesTile.getTileBorderStrokeWidth().should.be.equal(12);
            numberFeaturesTile.setTileBorderStrokeWidth(2);
            numberFeaturesTile.getTileBorderColor().should.be.equal("rgba(0, 0, 0, 1.0)");
            numberFeaturesTile.setTileBorderColor("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.getTileBorderColor().should.be.equal("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.setTileBorderColor("rgba(0, 0, 0, 1.0)");
            numberFeaturesTile.getTileFillColor().should.be.equal("rgba(0, 0, 0, 0.0625)");
            numberFeaturesTile.setTileFillColor("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.getTileFillColor().should.be.equal("rgba(0, 0, 0, 0.50)");
            numberFeaturesTile.setTileFillColor("rgba(0, 0, 0, 0.0625)");
            numberFeaturesTile.isDrawUnindexedTiles().should.be.equal(true);
            numberFeaturesTile.setDrawUnindexedTiles(false);
            numberFeaturesTile.isDrawUnindexedTiles().should.be.equal(false);
            numberFeaturesTile.setDrawUnindexedTiles(true);
            numberFeaturesTile.getCompressFormat().should.be.equal('png');
            numberFeaturesTile.setCompressFormat('jpeg');
            numberFeaturesTile.getCompressFormat().should.be.equal('jpeg');
            numberFeaturesTile.setCompressFormat('png');
            ft.setMaxFeaturesTileDraw(numberFeaturesTile);
            should.exist(ft.getMaxFeaturesTileDraw());
            ft.drawTile(153632, 91343, 18)
                .then(function (image) {
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', isWeb ? 'web' : '', isLinux ? 'max_feature_tile_unindexed_linux.png' : 'max_feature_tile_unindexed.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the max feature shaded tile and test various functions', function (done) {
            this.timeout(30000);
            var ft = new FeatureTiles(featureDao);
            ft.setMaxFeaturesPerTile(1);
            ft.getMaxFeaturesPerTile().should.be.equal(1);
            should.not.exist(ft.getMaxFeaturesTileDraw());
            var shadedFeaturesTile = new ShadedFeaturesTile();
            shadedFeaturesTile.getTileBorderStrokeWidth().should.be.equal(2);
            shadedFeaturesTile.setTileBorderStrokeWidth(12);
            shadedFeaturesTile.getTileBorderStrokeWidth().should.be.equal(12);
            shadedFeaturesTile.setTileBorderStrokeWidth(2);
            shadedFeaturesTile.getTileBorderColor().should.be.equal("rgba(0, 0, 0, 1.0)");
            shadedFeaturesTile.setTileBorderColor("rgba(0, 0, 0, 0.50)");
            shadedFeaturesTile.getTileBorderColor().should.be.equal("rgba(0, 0, 0, 0.50)");
            shadedFeaturesTile.setTileBorderColor("rgba(0, 0, 0, 1.0)");
            shadedFeaturesTile.getTileFillColor().should.be.equal("rgba(0, 0, 0, 0.0625)");
            shadedFeaturesTile.setTileFillColor("rgba(0, 0, 0, 0.50)");
            shadedFeaturesTile.getTileFillColor().should.be.equal("rgba(0, 0, 0, 0.50)");
            shadedFeaturesTile.setTileFillColor("rgba(0, 0, 0, 0.0625)");
            shadedFeaturesTile.isDrawUnindexedTiles().should.be.equal(true);
            shadedFeaturesTile.setDrawUnindexedTiles(false);
            shadedFeaturesTile.isDrawUnindexedTiles().should.be.equal(false);
            shadedFeaturesTile.setDrawUnindexedTiles(true);
            shadedFeaturesTile.getCompressFormat().should.be.equal('png');
            shadedFeaturesTile.setCompressFormat('jpeg');
            shadedFeaturesTile.getCompressFormat().should.be.equal('jpeg');
            shadedFeaturesTile.setCompressFormat('png');
            ft.setMaxFeaturesTileDraw(shadedFeaturesTile);
            should.exist(ft.getMaxFeaturesTileDraw());
            ft.drawTile(153632, 91343, 18)
                .then(function (image) {
                // fs.writeFileSync('/tmp/max_feature_tile_shaded.png', image);
                testSetup_1.default.diffImages(image, path.join(__dirname, '..', '..', '..', 'fixtures', 'featuretiles', 'max_feature_tile_shaded.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
    });
});
//# sourceMappingURL=testFeatureTiles.js.map