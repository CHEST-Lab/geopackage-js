"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("../../..");
var testSetup_1 = __importDefault(require("../../fixtures/testSetup"));
var GeoPackageTileRetriever = require('../../../lib/tiles/retriever').GeoPackageTileRetriever
// , GeoPackageAPI = require('../../..')
, BoundingBox = require('../../../lib/boundingBox').BoundingBox
// , testSetup = require('../../fixtures/testSetup')
, proj4 = require('proj4'), fs = require('fs-extra'), should = require('chai').should(), path = require('path');
var isLinux = process.platform === 'linux';
describe('GeoPackage Tile Retriever tests', function () {
    describe('Rivers GeoPackage tests', function () {
        var geoPackage;
        var tileDao;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var riversfilename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            riversfilename = path.join(__dirname, '..', '..', 'fixtures', 'rivers.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(riversfilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            tileDao = geoPackage.getTileDao('TILESosmds');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the web mercator bounding box', function () {
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            var result = gpr.getWebMercatorBoundingBox();
            result.minLongitude.should.be.equal(-20037508.342789244);
            result.maxLongitude.should.be.equal(20037508.342789244);
            result.minLatitude.should.be.equal(-20037508.342789255);
            result.maxLatitude.should.be.equal(20037508.342789244);
        });
        it('should get all the tiles in the bounding box', function () {
            var tiles = __1.GeoPackage.getTilesInBoundingBox(geoPackage, 'TILESosmds', 1, -180, 180, -85, 85);
            tiles.tiles.length.should.be.equal(4);
        });
        it('should get the x: 2, y: 1, z: 2 tile', function (done) {
            this.timeout(30000);
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            gpr.getTile(2, 1, 2)
                .then(function (tile) {
                testSetup_1.default.diffImages(tile, path.join(__dirname, '..', '..', 'fixtures', 'tiles', '2', '2', '1.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the web mercator x: 2, y: 1, z: 2 tile', function (done) {
            this.timeout(30000);
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            gpr.getWebMercatorTile(2, 1, 2)
                .then(function (tile) {
                testSetup_1.default.diffImages(tile, path.join(__dirname, '..', '..', 'fixtures', 'tiles', '2', '2', '1.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should get the tile with wgs84 bounds', function (done) {
            this.timeout(30000);
            var wgs84BoundingBox = new BoundingBox(0, 90, 0, 66.51326044311185);
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            gpr.getTileWithWgs84BoundsInProjection(wgs84BoundingBox, 2, 'EPSG:3857')
                .then(function (tile) {
                testSetup_1.default.diffImages(tile, path.join(__dirname, '..', '..', 'fixtures', 'reprojTile.png'), function (err, equal) {
                    equal.should.be.equal(true);
                    done();
                });
            });
        });
        it('should pull all of the tiles and compare them', function () {
            this.timeout(0);
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            var zooms = [0, 1, 2, 3];
            return zooms.reduce(function (zoomSequence, zoom) {
                return zoomSequence.then(function () {
                    var xtiles = [];
                    var tileCount = Math.pow(2, zoom);
                    for (var i = 0; i < tileCount; i++) {
                        xtiles.push(i);
                    }
                    return xtiles.reduce(function (xSequence, x) {
                        return xSequence.then(function () {
                            var ytiles = [];
                            var tileCount = Math.pow(2, zoom);
                            for (var i = 0; i < tileCount; i++) {
                                ytiles.push(i);
                            }
                            return ytiles.reduce(function (ySequence, y) {
                                return ySequence.then(function () {
                                    return new Promise(function (resolve, reject) {
                                        gpr.getTile(x, y, zoom)
                                            .then(function (tile) {
                                            testSetup_1.default.diffImages(tile, path.join(__dirname, '..', '..', 'fixtures', 'tiles', zoom.toString(), x.toString(), y.toString() + '.png'), function (err, equal) {
                                                console.log(path.join(__dirname, '..', '..', 'fixtures', 'tiles', zoom.toString(), x.toString(), y.toString() + '.png') + ' passes?', equal);
                                                equal.should.be.equal(true);
                                                resolve();
                                            });
                                        });
                                    });
                                });
                            }, Promise.resolve());
                        });
                    }, Promise.resolve());
                });
            }, Promise.resolve());
        });
        it('should get the x: 0, y: 0, z: 3 tile', function () {
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            return gpr.getTile(0, 0, 3)
                .then(function (tile) {
                should.exist(tile);
            });
        });
        it('should get the x: 2, y: 1, z: 3 tile', function () {
            var maxZoom = tileDao.maxZoom;
            var minZoom = tileDao.minZoom;
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            return gpr.getTile(2, 1, 3)
                .then(function (tile) {
                should.exist(tile);
            });
        });
        it('should have a tile at XYZ 0, 0, 1', function () {
            var maxZoom = tileDao.maxZoom;
            var minZoom = tileDao.minZoom;
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            var hasTile = gpr.hasTile(0, 0, 1);
            hasTile.should.be.equal(true);
        });
        it('should not have a tile at -1, 0, 0', function () {
            var maxZoom = tileDao.maxZoom;
            var minZoom = tileDao.minZoom;
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            var hasTile = gpr.hasTile(-1, 0, 0);
            hasTile.should.be.equal(false);
        });
        it('should get a tile specified with wgs84 coordinates', function () {
            var wgs84BoundingBox = new BoundingBox(0, 180, 0, 85.05112877980659);
            var gpr = new GeoPackageTileRetriever(tileDao, 512, 512);
            return gpr.getTileWithWgs84Bounds(wgs84BoundingBox)
                .then(function (tile) {
                should.exist(tile);
            });
        });
        // it('should get the tile matrix for 1 tile and no zoom specified', function(done) {
        //   var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
        //   var wgs84BoundingBox = new BoundingBox(0, 90, 0, 66.51326044311188);
        //   var webMercatorBoundingBox = wgs84BoundingBox.projectBoundingBox('EPSG:4326', 'EPSG:3857');
        //
        //   gpr.getTileMatrixWithWebMercatorBoundingBox(webMercatorBoundingBox, function(err, tileMatrix) {
        //     should.not.exist(err);
        //     should.exist(tileMatrix);
        //     tileMatrix.zoomLevel.should.be.equal(2);
        //     done();
        //   });
        // });
        //
        // it('should get the tile matrix for 1 tile and zoom specified', function(done) {
        //   var gpr = new GeoPackageTileRetriever(tileDao, 512, 512);
        //   var wgs84BoundingBox = new BoundingBox(0, 90, 0, 66.51326044311188);
        //   var webMercatorBoundingBox = wgs84BoundingBox.projectBoundingBox('EPSG:4326', 'EPSG:3857');
        //
        //   gpr.getTileMatrixWithWebMercatorBoundingBox(webMercatorBoundingBox, 3, function(err, tileMatrix) {
        //     should.not.exist(err);
        //     should.exist(tileMatrix);
        //     tileMatrix.zoomLevel.should.be.equal(3);
        //     done();
        //   });
        // });
    });
    describe('Scaled images GeoPackage tests', function () {
        var geoPackage;
        var tileDao;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var filename3857, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            filename3857 = path.join(__dirname, '..', '..', 'fixtures', '3857.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(filename3857)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            tileDao = geoPackage.getTileDao('imagery');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('delete the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            geoPackage.close();
                            return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the x: 0, y: 4, z: 4 tile', function (done) {
            this.timeout(0);
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            gpr.getTile(0, 4, 4)
                .then(function (tile) {
                var expectedPath;
                if (typeof (process) !== 'undefined' && process.version) {
                    expectedPath = path.join(__dirname, '..', '..', 'fixtures', 'tiles', 'imageryTile.png');
                }
                else {
                    expectedPath = path.join(__dirname, '..', '..', 'fixtures', 'tiles', 'imageryTileWeb.png');
                }
                testSetup_1.default.diffImages(tile, expectedPath, function (err, imagesAreSame) {
                    imagesAreSame.should.be.equal(true);
                    done(err);
                });
            });
        });
        it('should get the x: 0, y: 4, z: 4 tile without scaling', function (done) {
            this.timeout(0);
            var gpr = new GeoPackageTileRetriever(tileDao, 450, 450);
            gpr.getTile(0, 4, 4)
                .then(function (tile) {
                var expectedPath;
                if (typeof (process) !== 'undefined' && process.version) {
                    expectedPath = path.join(__dirname, '..', '..', 'fixtures', 'tiles', '450tile.png');
                }
                else {
                    expectedPath = path.join(__dirname, '..', '..', 'fixtures', 'tiles', '450tileWeb.png');
                }
                testSetup_1.default.diffImagesWithDimensions(tile, expectedPath, 450, 450, function (err, imagesAreSame) {
                    imagesAreSame.should.be.equal(true);
                    done(err);
                });
            });
        });
    });
    describe('4326 tile tests', function () {
        var tileDao;
        var geoPackage;
        var filename;
        var defs = require('../../../lib/proj4Defs');
        for (var name in defs) {
            if (defs[name]) {
                proj4.defs(name, defs[name]);
            }
        }
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var wgs84filename, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            wgs84filename = path.join(__dirname, '..', '..', 'fixtures', 'wgs84.gpkg');
                            return [4 /*yield*/, copyAndOpenGeopackage(wgs84filename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            geoPackage = result.geopackage;
                            tileDao = geoPackage.getTileDao('imagery');
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should delete the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the web mercator bounding box', function () {
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            var result = gpr.getWebMercatorBoundingBox();
            result.minLongitude.should.be.equal(-20037508.342789244);
            result.maxLongitude.should.be.equal(-15028131.257091932);
            result.minLatitude.should.be.equal(5621521.486192066);
            result.maxLatitude.should.be.equal(20036051.91933679);
        });
        it('should get the web mercator bounding box twice', function () {
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            var result = gpr.getWebMercatorBoundingBox();
            result.minLongitude.should.be.equal(-20037508.342789244);
            result.maxLongitude.should.be.equal(-15028131.257091932);
            result.minLatitude.should.be.equal(5621521.486192066);
            result.maxLatitude.should.be.equal(20036051.91933679);
            var result2 = gpr.getWebMercatorBoundingBox();
            result2.minLongitude.should.be.equal(-20037508.342789244);
            result2.maxLongitude.should.be.equal(-15028131.257091932);
            result2.minLatitude.should.be.equal(5621521.486192066);
            result2.maxLatitude.should.be.equal(20036051.91933679);
        });
        it('should get the x: 0, y: 4, z: 4 tile', function (done) {
            this.timeout(0);
            var gpr = new GeoPackageTileRetriever(tileDao, 256, 256);
            gpr.getTile(0, 4, 4)
                .then(function (tile) {
                var expectedPath;
                if (typeof (process) !== 'undefined' && process.version) {
                    expectedPath = path.join(__dirname, '..', '..', 'fixtures', 'tiles', isLinux ? 'reprojectTileLinux.png' : 'reprojectTile.png');
                }
                else {
                    expectedPath = path.join(__dirname, '..', '..', 'fixtures', 'tiles', 'reprojectTileWeb.png');
                }
                testSetup_1.default.diffImages(tile, expectedPath, function (err, imagesAreSame) {
                    imagesAreSame.should.be.equal(true);
                    done(err);
                });
            });
        });
    });
});
//# sourceMappingURL=testGeopackageTileRetriever.js.map