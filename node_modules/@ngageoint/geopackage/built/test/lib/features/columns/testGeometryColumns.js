"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var GeometryColumnsDao = require('../../../../lib/features/columns/geometryColumnsDao').GeometryColumnsDao
// @ts-ignore
, GeoPackageConnection = require('../../../../lib/db/geoPackageConnection'), should = require('chai').should(), path = require('path');
describe('GeometryColumns tests', function () {
    var geoPackage;
    var filename;
    beforeEach('should open the geopackage', function () {
        return __awaiter(this, void 0, void 0, function () {
            var originalFilename, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        originalFilename = path.join(__dirname, '..', '..', '..', 'fixtures', 'gdal_sample.gpkg');
                        return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                    case 1:
                        result = _a.sent();
                        geoPackage = result.geopackage;
                        filename = result.path;
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach('should close the geopackage', function () {
        geoPackage.close();
        testSetup_1.default.deleteGeoPackage(filename);
    });
    it('should get the feature tables', function () {
        var gcd = new GeometryColumnsDao(geoPackage);
        var tables = gcd.getFeatureTables();
        should.exist(tables);
        tables.length.should.be.equal(16);
        tables.should.have.members([
            'point2d',
            'linestring2d',
            'polygon2d',
            'multipoint2d',
            'multilinestring2d',
            'multipolygon2d',
            'geomcollection2d',
            'geometry2d',
            'point3d',
            'linestring3d',
            'polygon3d',
            'multipoint3d',
            'multilinestring3d',
            'multipolygon3d',
            'geomcollection3d',
            'geometry3d'
        ]);
    });
    it('should get the table', function () {
        var gcd = new GeometryColumnsDao(geoPackage);
        var table = gcd.queryForTableName('point2d');
        should.exist(table);
        // @ts-ignore
        compareProperties(table, {
            column_name: 'geom',
            table_name: 'point2d',
            geometry_type_name: 'POINT',
            srs_id: 0,
            z: 0,
            m: 0
        });
    });
    it('should get no table', function () {
        var gcd = new GeometryColumnsDao(geoPackage);
        var table = gcd.queryForTableName('doesnotexist');
        should.not.exist(table);
    });
    it('should get all the tables', function () {
        var gcd = new GeometryColumnsDao(geoPackage);
        var results = gcd.queryForAll();
        should.exist(results);
        results.should.have.property('length', 16);
    });
    it('should get the table', function () {
        var gcd = new GeometryColumnsDao(geoPackage);
        var table = gcd.queryForTableName('point2d');
        should.exist(table);
        // @ts-ignore
        compareProperties(table, {
            table_name: 'point2d',
            column_name: 'geom',
            geometry_type_name: 'POINT',
            srs_id: 0,
            z: 0,
            m: 0
        });
    });
    it('should get the srs from the table', function () {
        var gcd = new GeometryColumnsDao(geoPackage);
        var table = gcd.queryForTableName('point2d');
        should.exist(table);
        // @ts-ignore
        compareProperties(table, {
            table_name: 'point2d',
            column_name: 'geom',
            geometry_type_name: 'POINT',
            srs_id: 0,
            z: 0,
            m: 0
        });
        var srs = gcd.getSrs(table);
        // @ts-ignore
        compareProperties(srs, {
            srs_name: 'Undefined geographic SRS',
            srs_id: 0,
            organization: 'NONE',
            organization_coordsys_id: 0,
            definition: 'undefined',
            description: 'undefined geographic coordinate reference system'
        });
    });
    it('should get the contents from the table', function () {
        var gcd = new GeometryColumnsDao(geoPackage);
        var table = gcd.queryForTableName('point2d');
        should.exist(table);
        // @ts-ignore
        compareProperties(table, {
            table_name: 'point2d',
            column_name: 'geom',
            geometry_type_name: 'POINT',
            srs_id: 0,
            z: 0,
            m: 0
        });
        var contents = gcd.getContents(table);
        contents.should.be.deep.equal({
            table_name: 'point2d',
            data_type: 'features',
            identifier: 'point2d',
            description: '',
            last_change: '2014-08-27T15:36:41.000Z',
            min_x: 1,
            min_y: 2,
            max_x: 1,
            max_y: 2,
            srs_id: 0
        });
    });
    it('should get the projection from the table', function () {
        var gcd = new GeometryColumnsDao(geoPackage);
        var table = gcd.queryForTableName('point2d');
        should.exist(table);
        // @ts-ignore
        compareProperties(table, {
            table_name: 'point2d',
            column_name: 'geom',
            geometry_type_name: 'POINT',
            srs_id: 0,
            z: 0,
            m: 0
        });
        var projection = gcd.getProjection(table);
        should.not.exist(projection);
    });
});
//# sourceMappingURL=testGeometryColumns.js.map