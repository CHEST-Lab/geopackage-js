"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../../fixtures/testSetup"));
var fs = require('fs-extra'), should = require('chai').should(), path = require('path'), MetadataReference = require('../../../../lib/metadata/reference/metadataReference').MetadataReference, Metadata = require('../../../../lib/metadata/metadata').Metadata, GeoPackage = require('../../../../lib/geoPackage'), TableCreator = require('../../../../lib/db/tableCreator').TableCreator, Verification = require('../../../fixtures/verification');
describe('Metadata Reference tests', function () {
    var testGeoPackage;
    var geopackage;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup_1.default.createTmpGeoPackage()];
                    case 1:
                        created = _a.sent();
                        testGeoPackage = created.path;
                        geopackage = created.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        geopackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(testGeoPackage)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    });
    it('should create metadata and reference', function () {
        return geopackage.createMetadataTable()
            .then(function () {
            return geopackage.createMetadataReferenceTable();
        })
            .then(function () {
            Verification.verifyMetadataReference(geopackage).should.be.equal(true);
            Verification.verifyMetadata(geopackage).should.be.equal(true);
            var metadataDao = geopackage.metadataDao;
            var metadataReferenceDao = geopackage.metadataReferenceDao;
            var metadata1 = new Metadata();
            metadata1.id = 1;
            metadata1.md_scope = Metadata.DATASET;
            metadata1.md_standard_uri = "TEST_URI_1";
            metadata1.mime_type = 'text/xml';
            metadata1.metadata = 'TEST METDATA 1';
            var metadata2 = new Metadata();
            metadata2.id = 2;
            metadata2.md_scope = Metadata.FEATURE_TYPE;
            metadata2.md_standard_uri = "TEST_URI_2";
            metadata2.mime_type = 'text/xml';
            metadata2.metadata = 'TEST METDATA 2';
            var metadata3 = new Metadata();
            metadata3.id = 3;
            metadata3.md_scope = Metadata.TILE;
            metadata3.md_standard_uri = "TEST_URI_3";
            metadata3.mime_type = 'text/xml';
            metadata3.metadata = 'TEST METDATA 3';
            [metadata1, metadata2, metadata3].forEach(function (metadata) {
                var result = metadataDao.create(metadata);
                result.should.be.equal(metadata.id);
            });
            var ref1 = new MetadataReference();
            ref1.setReferenceScopeType(MetadataReference.GEOPACKAGE);
            ref1.timestamp = new Date();
            ref1.setMetadata(metadata1);
            var ref2 = new MetadataReference();
            ref2.setReferenceScopeType(MetadataReference.TABLE);
            ref2.table_name = 'TEST_TABLE_NAME_2';
            ref2.timestamp = new Date();
            ref2.setMetadata(metadata2);
            ref2.setParentMetadata(metadata1);
            [ref1, ref2].forEach(function (ref) {
                metadataReferenceDao.create(ref);
            });
        });
    });
    it('should create metadata and reference with a parent and then remove it', function (done) {
        geopackage.createMetadataTable()
            .then(function () {
            return geopackage.createMetadataReferenceTable();
        })
            .then(function () {
            var e_2, _a, e_3, _b;
            Verification.verifyMetadataReference(geopackage).should.be.equal(true);
            Verification.verifyMetadata(geopackage).should.be.equal(true);
            var metadataDao = geopackage.metadataDao;
            var metadataReferenceDao = geopackage.metadataReferenceDao;
            var metadata1 = new Metadata();
            metadata1.id = 1;
            metadata1.md_scope = Metadata.DATASET;
            metadata1.md_standard_uri = "TEST_URI_1";
            metadata1.mime_type = 'text/xml';
            metadata1.metadata = 'TEST METDATA 1';
            var metadata2 = new Metadata();
            metadata2.id = 2;
            metadata2.md_scope = Metadata.FEATURE_TYPE;
            metadata2.md_standard_uri = "TEST_URI_2";
            metadata2.mime_type = 'text/xml';
            metadata2.metadata = 'TEST METDATA 2';
            [metadata1, metadata2].forEach(function (metadata) {
                var result = metadataDao.create(metadata);
                result.should.be.equal(metadata.id);
            });
            var ref = new MetadataReference();
            ref.setReferenceScopeType(MetadataReference.TABLE);
            ref.table_name = 'TEST_TABLE_NAME_2';
            ref.timestamp = new Date();
            ref.setMetadata(metadata2);
            ref.setParentMetadata(metadata1);
            metadataReferenceDao.create(ref);
            var count = 0;
            try {
                for (var _c = __values(metadataReferenceDao.queryByMetadataParent(metadata1.id)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var row = _d.value;
                    count++;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
            count.should.be.equal(1);
            var result = metadataReferenceDao.removeMetadataParent(metadata1.id);
            var countAfter = 0;
            try {
                for (var _e = __values(metadataReferenceDao.queryByMetadataParent(metadata1.id)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var row = _f.value;
                    countAfter++;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            done();
        });
    });
    it('should query for metadatareference by metadata and parent', function () {
        return geopackage.createMetadataTable()
            .then(function () {
            return geopackage.createMetadataReferenceTable();
        })
            .then(function () {
            var e_4, _a;
            Verification.verifyMetadataReference(geopackage).should.be.equal(true);
            Verification.verifyMetadata(geopackage).should.be.equal(true);
            var metadataDao = geopackage.metadataDao;
            var metadataReferenceDao = geopackage.metadataReferenceDao;
            var metadata1 = new Metadata();
            metadata1.id = 1;
            metadata1.md_scope = Metadata.DATASET;
            metadata1.md_standard_uri = "TEST_URI_1";
            metadata1.mime_type = 'text/xml';
            metadata1.metadata = 'TEST METDATA 1';
            var metadata2 = new Metadata();
            metadata2.id = 2;
            metadata2.md_scope = Metadata.FEATURE_TYPE;
            metadata2.md_standard_uri = "TEST_URI_2";
            metadata2.mime_type = 'text/xml';
            metadata2.metadata = 'TEST METDATA 2';
            var metadata3 = new Metadata();
            metadata3.id = 3;
            metadata3.md_scope = Metadata.TILE;
            metadata3.md_standard_uri = "TEST_URI_3";
            metadata3.mime_type = 'text/xml';
            metadata3.metadata = 'TEST METDATA 3';
            [metadata1, metadata2, metadata3].forEach(function (metadata) {
                var result = metadataDao.create(metadata);
                result.should.be.equal(metadata.id);
            });
            var ref1 = new MetadataReference();
            ref1.setReferenceScopeType(MetadataReference.GEOPACKAGE);
            ref1.timestamp = new Date();
            ref1.setMetadata(metadata1);
            ref1.md_file_id.should.be.equal(metadata1.id);
            should.not.exist(ref1.table_name);
            should.not.exist(ref1.column_name);
            should.not.exist(ref1.row_id_value);
            var ref2 = new MetadataReference();
            ref2.setReferenceScopeType(MetadataReference.TABLE);
            ref2.table_name = 'TEST_TABLE_NAME_2';
            ref2.timestamp = new Date();
            ref2.setMetadata(metadata2);
            ref2.setParentMetadata(metadata1);
            should.not.exist(ref2.column_name);
            should.not.exist(ref2.row_id_value);
            ref2.md_parent_id.should.be.equal(metadata1.id);
            var ref3 = new MetadataReference();
            ref3.setReferenceScopeType(MetadataReference.ROW);
            ref3.timestamp = new Date();
            ref3.setMetadata();
            ref3.setParentMetadata();
            ref3.md_file_id.should.be.equal(-1);
            ref3.md_parent_id.should.be.equal(-1);
            should.not.exist(ref3.column_name);
            var ref4 = new MetadataReference();
            ref4.setReferenceScopeType(MetadataReference.COLUMN);
            ref4.timestamp = new Date();
            ref4.setMetadata(metadata1);
            should.not.exist(ref4.row_id_value);
            [ref1, ref2].forEach(function (ref) {
                metadataReferenceDao.create(ref);
            });
            try {
                for (var _b = __values(metadataReferenceDao.queryByMetadataAndParent(metadata2.id, metadata1.id)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    row.table_name.should.be.equal('TEST_TABLE_NAME_2');
                    row.md_file_id.should.be.equal(metadata2.id);
                    row.md_parent_id.should.be.equal(metadata1.id);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    });
    it('should query for metadatareference by metadata', function () {
        return geopackage.createMetadataTable()
            .then(function () {
            return geopackage.createMetadataReferenceTable();
        })
            .then(function () {
            var e_5, _a;
            Verification.verifyMetadataReference(geopackage).should.be.equal(true);
            Verification.verifyMetadata(geopackage).should.be.equal(true);
            var metadataDao = geopackage.metadataDao;
            var metadataReferenceDao = geopackage.metadataReferenceDao;
            var metadata1 = new Metadata();
            metadata1.id = 1;
            metadata1.md_scope = Metadata.DATASET;
            metadata1.md_standard_uri = "TEST_URI_1";
            metadata1.mime_type = 'text/xml';
            metadata1.metadata = 'TEST METDATA 1';
            var metadata2 = new Metadata();
            metadata2.id = 2;
            metadata2.md_scope = Metadata.FEATURE_TYPE;
            metadata2.md_standard_uri = "TEST_URI_2";
            metadata2.mime_type = 'text/xml';
            metadata2.metadata = 'TEST METDATA 2';
            var metadata3 = new Metadata();
            metadata3.id = 3;
            metadata3.md_scope = Metadata.TILE;
            metadata3.md_standard_uri = "TEST_URI_3";
            metadata3.mime_type = 'text/xml';
            metadata3.metadata = 'TEST METDATA 3';
            [metadata1, metadata2, metadata3].forEach(function (metadata) {
                var result = metadataDao.create(metadata);
                result.should.be.equal(metadata.id);
            });
            var ref1 = new MetadataReference();
            ref1.setReferenceScopeType(MetadataReference.GEOPACKAGE);
            ref1.timestamp = new Date();
            ref1.setMetadata(metadata2);
            var ref2 = new MetadataReference();
            ref2.setReferenceScopeType(MetadataReference.TABLE);
            ref2.table_name = 'TEST_TABLE_NAME_2';
            ref2.timestamp = new Date();
            ref2.setMetadata(metadata2);
            ref2.setParentMetadata(metadata1);
            [ref1, ref2].forEach(function (ref) {
                metadataReferenceDao.create(ref);
            });
            var count = 0;
            try {
                for (var _b = __values(metadataReferenceDao.queryByMetadata(metadata2.id)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    row.md_file_id.should.be.equal(metadata2.id);
                    count++;
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            count.should.be.equal(2);
        });
    });
});
//# sourceMappingURL=testMetadataReference.js.map