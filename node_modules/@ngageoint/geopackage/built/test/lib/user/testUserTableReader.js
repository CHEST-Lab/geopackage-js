"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var testSetup_1 = __importDefault(require("../../fixtures/testSetup"));
var UserTableReader = require('../../../lib/user/userTableReader').UserTableReader, UserDao = require('../../../lib/user/userDao').UserDao, path = require('path'), should = require('chai').should();
describe('UserTableReader tests', function () {
    var geoPackage;
    var filename;
    beforeEach('create the GeoPackage connection', function () {
        return __awaiter(this, void 0, void 0, function () {
            var sampleFilename, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sampleFilename = path.join(__dirname, '..', '..', 'fixtures', 'gdal_sample.gpkg');
                        return [4 /*yield*/, copyAndOpenGeopackage(sampleFilename)];
                    case 1:
                        result = _a.sent();
                        filename = result.path;
                        geoPackage = result.geopackage;
                        return [2 /*return*/];
                }
            });
        });
    });
    afterEach('close the geopackage connection', function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        geoPackage.close();
                        return [4 /*yield*/, testSetup_1.default.deleteGeoPackage(filename)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should read the table', function () {
        var reader = new UserTableReader('point2d');
        var table = reader.readTable(geoPackage.database);
        table.table_name.should.be.equal('point2d');
        table.columns.length.should.be.equal(8);
        table.columns[0].name.should.be.equal('fid');
        table.columns[1].name.should.be.equal('geom');
        table.columns[2].name.should.be.equal('intfield');
        table.columns[3].name.should.be.equal('strfield');
        table.columns[4].name.should.be.equal('realfield');
        table.columns[5].name.should.be.equal('datetimefield');
        table.columns[6].name.should.be.equal('datefield');
        table.columns[7].name.should.be.equal('binaryfield');
    });
    it('should query the table', function () {
        var reader = new UserTableReader('point2d');
        var table = reader.readTable(geoPackage.database);
        var ud = new UserDao(geoPackage, table);
        var results = ud.queryForAll();
        should.exist(results);
        results.length.should.be.equal(2);
        for (var i = 0; i < results.length; i++) {
            var ur = ud.getRow(results[i]);
            ur.columnCount().should.be.equal(8);
            var names = ur.getColumnNames();
            names.should.include('fid');
            names.should.include('geom');
            names.should.include('intfield');
            names.should.include('strfield');
            names.should.include('realfield');
            names.should.include('datetimefield');
            names.should.include('datefield');
            names.should.include('binaryfield');
            ur.getColumnNameWithIndex(0).should.be.equal('fid');
            ur.getColumnIndexWithColumnName('fid').should.be.equal(0);
            ur.getValueWithIndex(0).should.be.equal(i + 1);
            ur.getValueWithColumnName('fid').should.be.equal(i + 1);
            ur.getRowColumnTypeWithIndex(0).should.be.equal(5);
            ur.getRowColumnTypeWithColumnName('fid').should.be.equal(5);
            ur.getColumnWithIndex(0).name.should.be.equal('fid');
            ur.getColumnWithColumnName('fid').name.should.be.equal('fid');
            ur.getId().should.be.equal(i + 1);
            ur.getPkColumn().name.should.be.equal('fid');
            ur.getColumnWithIndex(0).getTypeName().should.be.equal('INTEGER');
            should.exist(ur.values);
        }
    });
});
//# sourceMappingURL=testUserTableReader.js.map