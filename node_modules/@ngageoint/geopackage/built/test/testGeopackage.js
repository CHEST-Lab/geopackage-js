"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var index_2 = require("../index");
var testSetup = require('./fixtures/testSetup').default;
var path = require('path'), fs = require('fs-extra'), 
// @ts-ignore
nock = require('nock'), mock = require('xhr-mock').default, should = require('chai').should();
describe('GeoPackageAPI tests', function () {
    var existingPath = path.join(__dirname, 'fixtures', 'rivers.gpkg');
    var geopackageToCreate = path.join(__dirname, 'fixtures', 'tmp', 'tmp.gpkg');
    var tilePath = path.join(__dirname, 'fixtures', 'tiles', '0', '0', '0.png');
    var indexedPath = path.join(__dirname, 'fixtures', 'rivers_indexed.gpkg');
    var countriesPath = path.join(__dirname, 'fixtures', 'countries_0.gpkg');
    var base = 'http://ngageoint.github.io';
    var urlPath = '/GeoPackage/examples/rivers.gpkg';
    var url = base + urlPath;
    var badUrl = base + '/bad';
    var errorUrl = base + '/error';
    beforeEach(function () {
        if (!nock.isActive()) {
            nock.activate();
        }
        mock.setup();
    });
    afterEach(function () {
        // @ts-ignore
        nock.restore();
        mock.teardown();
    });
    it('should open the geopackage', function () {
        return __awaiter(this, void 0, void 0, function () {
            var newPath, geopackage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, testSetup.copyGeopackage(existingPath)];
                    case 1:
                        newPath = _a.sent();
                        return [4 /*yield*/, index_1.GeoPackage.open(newPath)];
                    case 2:
                        geopackage = _a.sent();
                        should.exist(geopackage);
                        should.exist(geopackage.getTables);
                        geopackage.close();
                        // @ts-ignore
                        return [4 /*yield*/, testSetup.deleteGeoPackage(newPath)];
                    case 3:
                        // @ts-ignore
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should open the geopackage with a promise', function () {
        var gppath;
        // @ts-ignore
        return testSetup
            .copyGeopackage(existingPath)
            .then(function (newPath) {
            gppath = newPath;
            return index_1.GeoPackage.open(gppath);
        })
            .then(function (geopackage) {
            should.exist(geopackage);
            should.exist(geopackage.getTables);
        })
            .then(function () {
            // @ts-ignore
            return testSetup.deleteGeoPackage(gppath);
        });
    });
    it('should open the geopackage from a URL', function () {
        var gppath;
        // @ts-ignore
        return testSetup
            .copyGeopackage(existingPath)
            .then(function (newPath) {
            gppath = newPath;
            nock(base)
                .get(urlPath)
                .replyWithFile(200, gppath);
            mock.get(url, {
                body: fs.readFileSync(gppath).buffer,
            });
        })
            .then(function () {
            return index_1.GeoPackage.open(url);
        })
            .then(function (geopackage) {
            should.exist(geopackage);
            should.exist(geopackage.getTables);
        })
            .then(function () {
            // @ts-ignore
            return testSetup.deleteGeoPackage(gppath);
        })
            .catch(function (err) {
            console.log('err', err);
            should.fail('', err);
        });
    });
    it('should throw an error if the URL returns an error', function () {
        nock(base)
            .get('/error')
            .replyWithError('error');
        mock.get(errorUrl, function () {
            return Promise.reject(new Error());
        });
        return (index_1.GeoPackage.open(errorUrl)
            // @ts-ignore
            .then(function (geopackage) {
            should.fail(true, false, 'Should have failed');
        })
            .catch(function (err) {
            should.exist(err);
        }));
    });
    it('should throw an error if the URL does not return 200', function () {
        nock(base)
            .get('/bad')
            .reply(404);
        mock.get(badUrl, {
            status: 404,
        });
        return (index_1.GeoPackage.open(badUrl)
            // @ts-ignore
            .then(function (geopackage) {
            should.fail(false, true);
        })
            .catch(function (err) {
            should.exist(err);
        }));
    });
    it('should not open a file without the minimum tables', function () {
        return __awaiter(this, void 0, void 0, function () {
            var geopackage, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // @ts-ignore
                    return [4 /*yield*/, testSetup.createBareGeoPackage(geopackageToCreate)];
                    case 1:
                        // @ts-ignore
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, index_1.GeoPackage.open(geopackageToCreate)];
                    case 3:
                        geopackage = _a.sent();
                        should.not.exist(geopackage);
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        should.exist(e_1);
                        return [3 /*break*/, 5];
                    case 5: 
                    // @ts-ignore
                    return [4 /*yield*/, testSetup.deleteGeoPackage(geopackageToCreate)];
                    case 6:
                        // @ts-ignore
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should not open a file without the correct extension', function () {
        return __awaiter(this, void 0, void 0, function () {
            var geopackage, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, index_1.GeoPackage.open(tilePath)];
                    case 1:
                        geopackage = _a.sent();
                        should.not.exist(geopackage);
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        should.exist(e_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    });
    it('should not open a file without the correct extension via promise', function () {
        index_1.GeoPackage.open(tilePath).catch(function (error) {
            should.exist(error);
        });
    });
    it('should open the geopackage byte array', function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, geopackage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fs.readFile(existingPath)];
                    case 1:
                        data = _a.sent();
                        return [4 /*yield*/, index_1.GeoPackage.open(data)];
                    case 2:
                        geopackage = _a.sent();
                        should.exist(geopackage);
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should not open a byte array that is not a geopackage', function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, geopackage, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fs.readFile(tilePath)];
                    case 1:
                        data = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, index_1.GeoPackage.open(data)];
                    case 3:
                        geopackage = _a.sent();
                        should.not.exist(geopackage);
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        should.exist(err_1);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    });
    it('should not create a geopackage without the correct extension', function () {
        return __awaiter(this, void 0, void 0, function () {
            var gp, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, index_1.GeoPackage.create(tilePath)];
                    case 1:
                        gp = _a.sent();
                        should.fail(gp, null, 'Error should have been thrown');
                        return [3 /*break*/, 3];
                    case 2:
                        e_3 = _a.sent();
                        should.exist(e_3);
                        return [2 /*return*/];
                    case 3:
                        should.fail(false, true, 'Error should have been thrown');
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should not create a geopackage without the correct extension return promise', function (done) {
        index_1.GeoPackage.create(tilePath)
            // @ts-ignore
            .then(function (geopackage) {
            // should not get called
            false.should.be.equal(true);
        })
            .catch(function (error) {
            should.exist(error);
            done();
        });
    });
    it('should create a geopackage', function () {
        return __awaiter(this, void 0, void 0, function () {
            var gp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, index_1.GeoPackage.create(geopackageToCreate)];
                    case 1:
                        gp = _a.sent();
                        should.exist(gp);
                        should.exist(gp.getTables);
                        return [4 /*yield*/, testSetup.deleteGeoPackage(geopackageToCreate)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create a geopackage with a promise', function () {
        index_1.GeoPackage.create(geopackageToCreate).then(function (geopackage) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            should.exist(geopackage);
                            should.exist(geopackage.getTables);
                            return [4 /*yield*/, testSetup.deleteGeoPackage(geopackageToCreate)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    it('should create a geopackage and export it', function () {
        return __awaiter(this, void 0, void 0, function () {
            var gp, buffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, index_1.GeoPackage.create(geopackageToCreate)];
                    case 1:
                        gp = _a.sent();
                        should.exist(gp);
                        return [4 /*yield*/, gp.export()];
                    case 2:
                        buffer = _a.sent();
                        should.exist(buffer);
                        return [4 /*yield*/, testSetup.deleteGeoPackage(geopackageToCreate)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should create a geopackage in memory', function () {
        return __awaiter(this, void 0, void 0, function () {
            var gp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, index_1.GeoPackage.create()];
                    case 1:
                        gp = _a.sent();
                        should.exist(gp);
                        return [2 /*return*/];
                }
            });
        });
    });
    describe('should operate on a GeoPacakge with lots of features', function () {
        var indexedGeopackage;
        var originalFilename = countriesPath;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            indexedGeopackage = result.geopackage;
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            indexedGeopackage.close();
                            // @ts-ignore
                            return [4 /*yield*/, testSetup.deleteGeoPackage(filename)];
                        case 1:
                            // @ts-ignore
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the closest feature in an XYZ tile', function () {
            var closest = index_1.GeoPackage.getClosestFeatureInXYZTile(indexedGeopackage, 'country', 0, 0, 0, 40, -119);
            closest.id.should.be.equal(481);
            closest.gp_table.should.be.equal('country');
            closest.distance.should.be.equal(0);
        });
    });
    describe('should operate on an indexed geopackage', function () {
        var indexedGeopackage;
        var originalFilename = indexedPath;
        var filename;
        beforeEach('should open the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, copyAndOpenGeopackage(originalFilename)];
                        case 1:
                            result = _a.sent();
                            filename = result.path;
                            indexedGeopackage = result.geopackage;
                            return [2 /*return*/];
                    }
                });
            });
        });
        afterEach('should close the geopackage', function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            indexedGeopackage.close();
                            // @ts-ignore
                            return [4 /*yield*/, testSetup.deleteGeoPackage(filename)];
                        case 1:
                            // @ts-ignore
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the tables', function () {
            var tables = indexedGeopackage.getTables();
            tables.should.be.deep.equal({ attributes: [], features: ['rivers'], tiles: ['rivers_tiles'] });
        });
        it('should get the tile tables', function () {
            var tables = indexedGeopackage.getTileTables();
            tables.should.be.deep.equal(['rivers_tiles']);
        });
        it('should get the feature tables', function () {
            var tables = indexedGeopackage.getFeatureTables();
            tables.should.be.deep.equal(['rivers']);
        });
        it('should check if it has feature table', function () {
            var exists = indexedGeopackage.hasFeatureTable('rivers');
            exists.should.be.equal(true);
        });
        it('should check if does not have feature table', function () {
            var exists = indexedGeopackage.hasFeatureTable('rivers_no');
            exists.should.be.equal(false);
        });
        it('should check if it has tile table', function () {
            var exists = indexedGeopackage.hasTileTable('rivers_tiles');
            exists.should.be.equal(true);
        });
        it('should check if does not have tile table', function () {
            var exists = indexedGeopackage.hasTileTable('rivers_tiles_no');
            exists.should.be.equal(false);
        });
        it('should get the 0 0 0 tile', function () {
            return index_1.GeoPackage.xyzTile(indexedGeopackage, 'rivers_tiles', 0, 0, 0, 256, 256).then(function (tile) {
                should.exist(tile);
            });
        });
        it('should get the 0 0 0 tile in a canvas', function () {
            return __awaiter(this, void 0, void 0, function () {
                var canvas, Canvas;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (typeof process !== 'undefined' && process.version) {
                                Canvas = require('canvas');
                                canvas = Canvas.createCanvas(256, 256);
                            }
                            else {
                                canvas = document.createElement('canvas');
                            }
                            return [4 /*yield*/, index_1.GeoPackage.xyzTile(indexedGeopackage, 'rivers_tiles', 0, 0, 0, 256, 256, canvas)];
                        case 1:
                            _a.sent();
                            testSetup.diffCanvas(canvas, path.join(__dirname, 'fixtures', '3857_rivers_world_tile.png'));
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should get the world as a 4326 tile in a canvas', function () {
            return __awaiter(this, void 0, void 0, function () {
                var canvas, Canvas;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (typeof process !== 'undefined' && process.version) {
                                Canvas = require('canvas');
                                canvas = Canvas.createCanvas(512, 256);
                            }
                            else {
                                canvas = document.createElement('canvas');
                            }
                            return [4 /*yield*/, index_1.GeoPackage.projectedTile(indexedGeopackage, 'rivers_tiles', -90, -180, 90, 180, 0, 'EPSG:4326', 512, 256, canvas)];
                        case 1:
                            _a.sent();
                            testSetup.diffCanvas(canvas, path.join(__dirname, 'fixtures', '4326_rivers_world_tile.png'));
                            return [2 /*return*/];
                    }
                });
            });
        });
        // it('should get the 0 0 0 vector tile', function() {
        //   var vectorTile = GeoPackage.getVectorTile(indexedGeopackage, 'rivers', 0, 0, 0);
        //   should.exist(vectorTile);
        // });
        it('should query for the tiles in the bounding box', function () {
            var tiles = index_1.GeoPackage.getTilesInBoundingBoxWebZoom(indexedGeopackage, 'rivers_tiles', 0, -180, 180, -80, 80);
            tiles.tiles.length.should.be.equal(1);
        });
        it('should add geojson to the geopackage and keep it indexed', function () {
            var id = index_1.GeoPackage.addGeoJSONFeatureToGeoPackage(indexedGeopackage, {
                type: 'Feature',
                properties: {
                    property_0: 'test',
                },
                geometry: {
                    type: 'Point',
                    coordinates: [-99.84374999999999, 40.17887331434696],
                },
            }, 'rivers', true);
            // ensure the last indexed changed
            var db = indexedGeopackage.database;
            var index = db.get('SELECT * FROM nga_geometry_index where geom_id = ?', [id]);
            index.geom_id.should.be.equal(id);
        });
        it('should add geojson to the geopackage and keep it indexed and query it', function () {
            // @ts-ignore
            var id = index_1.GeoPackage.addGeoJSONFeatureToGeoPackage(indexedGeopackage, {
                type: 'Feature',
                properties: {
                    property_0: 'test',
                },
                geometry: {
                    type: 'Point',
                    coordinates: [-99.84374999999999, 40.17887331434696],
                },
            }, 'rivers', true);
            var features = index_1.GeoPackage.queryForGeoJSONFeaturesInTable(indexedGeopackage, 'rivers', new index_2.BoundingBox(-99.9, -99.8, 40.16, 40.18));
            features.length.should.be.equal(1);
        });
        it('should add geojson to the geopackage and keep it indexed and iterate it', function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, iterator, iterator_1, iterator_1_1, geoJson;
                var e_4, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            id = index_1.GeoPackage.addGeoJSONFeatureToGeoPackage(indexedGeopackage, {
                                type: 'Feature',
                                properties: {
                                    property_0: 'test',
                                },
                                geometry: {
                                    type: 'Point',
                                    coordinates: [-99.84374999999999, 40.17887331434696],
                                },
                            }, 'rivers', true);
                            return [4 /*yield*/, index_1.GeoPackage.iterateGeoJSONFeatures(indexedGeopackage, 'rivers', new index_2.BoundingBox(-99.9, -99.8, 40.16, 40.18))];
                        case 1:
                            iterator = _b.sent();
                            try {
                                for (iterator_1 = __values(iterator), iterator_1_1 = iterator_1.next(); !iterator_1_1.done; iterator_1_1 = iterator_1.next()) {
                                    geoJson = iterator_1_1.value;
                                    geoJson.properties.Scalerank.should.be.equal('test');
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (iterator_1_1 && !iterator_1_1.done && (_a = iterator_1.return)) _a.call(iterator_1);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should add geojson to the geopackage and keep it indexed and iterate it and pull the features', function () {
            var e_5, _a;
            // @ts-ignore
            var id = index_1.GeoPackage.addGeoJSONFeatureToGeoPackage(indexedGeopackage, {
                type: 'Feature',
                properties: {
                    property_0: 'test',
                },
                geometry: {
                    type: 'Point',
                    coordinates: [-99.84374999999999, 40.17887331434696],
                },
            }, 'rivers', true);
            var iterator = index_1.GeoPackage.iterateGeoJSONFeaturesFromTable(indexedGeopackage, 'rivers');
            try {
                for (var _b = __values(iterator.results), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var geoJson = _c.value;
                    // @ts-ignore
                    should.exist(geoJson.properties);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    });
    describe('operating on a new geopackage', function () {
        var geopackage;
        beforeEach(function (done) {
            fs.unlink(geopackageToCreate, function () {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, index_1.GeoPackage.create(geopackageToCreate)];
                            case 1:
                                geopackage = _a.sent();
                                done();
                                return [2 /*return*/];
                        }
                    });
                });
            });
        });
        afterEach(function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, testSetup.deleteGeoPackage(geopackageToCreate)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should create a feature table', function () {
            var columns = [];
            var tableName = 'features';
            var geometryColumns = new index_2.GeometryColumns();
            geometryColumns.table_name = tableName;
            geometryColumns.column_name = 'geometry';
            geometryColumns.geometry_type_name = 'GEOMETRY';
            geometryColumns.z = 0;
            geometryColumns.m = 0;
            columns.push(index_2.FeatureColumn.createPrimaryKeyColumnWithIndexAndName(0, 'id'));
            columns.push(index_2.FeatureColumn.createColumn(7, 'test_text_limited.test', index_2.DataTypes.TEXT, false, null, 5));
            columns.push(index_2.FeatureColumn.createColumn(8, 'test_blob_limited.test', index_2.DataTypes.BLOB, false, null, 7));
            columns.push(index_2.FeatureColumn.createGeometryColumn(1, 'geometry', 'GEOMETRY', false, null));
            columns.push(index_2.FeatureColumn.createColumn(2, 'test_text.test', index_2.DataTypes.TEXT, false, ''));
            columns.push(index_2.FeatureColumn.createColumn(3, 'test_real.test', index_2.DataTypes.REAL, false, null));
            columns.push(index_2.FeatureColumn.createColumn(4, 'test_boolean.test', index_2.DataTypes.BOOLEAN, false, null));
            columns.push(index_2.FeatureColumn.createColumn(5, 'test_blob.test', index_2.DataTypes.BLOB, false, null));
            columns.push(index_2.FeatureColumn.createColumn(6, 'test_integer.test', index_2.DataTypes.INTEGER, false, ''));
            return index_1.GeoPackage.createFeatureTable(geopackage, tableName, columns, geometryColumns)
                .then(function (featureDao) {
                should.exist(featureDao);
                var exists = geopackage.hasFeatureTable(tableName);
                exists.should.be.equal(true);
                var results = geopackage.getFeatureTables();
                results.length.should.be.equal(1);
                results[0].should.be.equal(tableName);
                return index_1.GeoPackage.addGeoJSONFeatureToGeoPackage(geopackage, {
                    type: 'Feature',
                    properties: {
                        'test_text_limited.test': 'test',
                    },
                    geometry: {
                        type: 'Point',
                        coordinates: [-99.84374999999999, 40.17887331434696],
                    },
                }, tableName);
            })
                .then(function (id) {
                id.should.be.equal(1);
                return index_1.GeoPackage.addGeoJSONFeatureToGeoPackage(geopackage, {
                    type: 'Feature',
                    properties: {
                        'test_text_limited.test': 'test',
                    },
                    geometry: {
                        type: 'Point',
                        coordinates: [-99.84374999999999, 40.17887331434696],
                    },
                }, tableName);
            })
                .then(function (id) {
                id.should.be.equal(2);
                return index_1.GeoPackage.getFeature(geopackage, tableName, 2);
            })
                .then(function (feature) {
                should.exist(feature);
                feature.id.should.be.equal(2);
                should.exist(feature.geometry);
                return index_1.GeoPackage.iterateGeoJSONFeaturesFromTable(geopackage, tableName);
            })
                .then(function (each) {
                var e_6, _a;
                var count = 0;
                try {
                    // @ts-ignore
                    for (var _b = __values(each.results), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var row = _c.value;
                        count++;
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
                count.should.be.equal(2);
            });
        });
        it('should create a tile table', function () {
            // @ts-ignore
            var columns = [];
            var tableName = 'tiles';
            var contentsBoundingBox = new index_2.BoundingBox(-180, 180, -80, 80);
            var contentsSrsId = 4326;
            var tileMatrixSetBoundingBox = new index_2.BoundingBox(-180, 180, -80, 80);
            var tileMatrixSetSrsId = 4326;
            return geopackage
                .createTileTableWithTableName(tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId)
                .then(function (tileMatrixSet) {
                should.exist(tileMatrixSet);
                var exists = geopackage.hasTileTable('tiles');
                exists.should.be.equal(true);
                var tables = geopackage.getTileTables();
                tables.length.should.be.equal(1);
                tables[0].should.be.equal('tiles');
            });
        });
        it('should create a standard web mercator tile table with the default tile size', function () {
            var tableName = 'tiles_web_mercator';
            var contentsBounds = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var contentsSrsId = 3857;
            var matrixSetBounds = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var tileMatrixSetSrsId = 3857;
            // @ts-ignore
            return index_1.GeoPackage.createStandardWebMercatorTileTable(geopackage, tableName, contentsBounds, contentsSrsId, matrixSetBounds, tileMatrixSetSrsId, 0, 3).then(function (matrixSet) {
                matrixSet.table_name.should.equal(tableName);
                matrixSet.srs_id.should.equal(3857);
                matrixSet.min_x.should.equal(matrixSetBounds.minLongitude);
                matrixSet.max_x.should.equal(matrixSetBounds.maxLongitude);
                matrixSet.min_y.should.equal(matrixSetBounds.minLatitude);
                matrixSet.max_y.should.equal(matrixSetBounds.maxLatitude);
                var dbMatrixSet = geopackage.tileMatrixSetDao.queryForId(tableName);
                dbMatrixSet.should.deep.equal(matrixSet);
                var matrixDao = geopackage.tileMatrixDao;
                var matrices = matrixDao.queryForAll();
                matrices.length.should.equal(4);
                matrices.forEach(function (matrix) {
                    matrix.tile_width.should.equal(256);
                    matrix.tile_height.should.equal(256);
                });
            });
        });
        it('should create a standard web mercator tile table with a custom tile size', function () {
            var tableName = 'custom_tile_size';
            var contentsBounds = new index_2.BoundingBox(-31644.9297, 6697565.2924, 4127.5995, 6723706.7561);
            var matrixSetBounds = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var tileSize = 320;
            return index_1.GeoPackage.createStandardWebMercatorTileTable(geopackage, tableName, contentsBounds, 3857, matrixSetBounds, 3857, 9, 13, tileSize).then(function (matrixSet) {
                matrixSet.table_name.should.equal(tableName);
                matrixSet.srs_id.should.equal(3857);
                matrixSet.min_x.should.equal(matrixSetBounds.minLongitude);
                matrixSet.max_x.should.equal(matrixSetBounds.maxLongitude);
                matrixSet.min_y.should.equal(matrixSetBounds.minLatitude);
                matrixSet.max_y.should.equal(matrixSetBounds.maxLatitude);
                var dbMatrixSet = geopackage.tileMatrixSetDao.queryForId(tableName);
                dbMatrixSet.should.deep.equal(matrixSet);
                var matrixDao = geopackage.tileMatrixDao;
                var matrices = matrixDao.queryForAll();
                matrices.length.should.equal(5);
                matrices.forEach(function (matrix) {
                    matrix.tile_width.should.equal(tileSize);
                    matrix.tile_height.should.equal(tileSize);
                });
            });
        });
        it('should add a tile to the tile table', function (done) {
            var tableName = 'tiles_web_mercator_2';
            var contentsBoundingBox = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var contentsSrsId = 3857;
            var tileMatrixSetBoundingBox = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var tileMatrixSetSrsId = 3857;
            // @ts-ignore
            index_1.GeoPackage.createStandardWebMercatorTileTable(geopackage, tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId, 0, 0).then(function (tileMatrixSet) {
                return __awaiter(this, void 0, void 0, function () {
                    var tileData, result, tileRow;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                should.exist(tileMatrixSet);
                                return [4 /*yield*/, loadTile(tilePath)];
                            case 1:
                                tileData = _a.sent();
                                result = geopackage.addTile(tileData, tableName, 0, 0, 0);
                                result.should.be.equal(1);
                                tileRow = index_1.GeoPackage.getTileFromTable(geopackage, tableName, 0, 0, 0);
                                // @ts-ignore
                                testSetup.diffImages(tileRow.tileData, tilePath, function (err, equal) {
                                    equal.should.be.equal(true);
                                    done();
                                });
                                return [2 /*return*/];
                        }
                    });
                });
            });
        });
        it('should add a tile to the tile table and get it via xyz', function (done) {
            // @ts-ignore
            var columns = [];
            var tableName = 'tiles_web_mercator_3';
            var contentsBoundingBox = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var contentsSrsId = 3857;
            var tileMatrixSetBoundingBox = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var tileMatrixSetSrsId = 3857;
            // @ts-ignore
            index_1.GeoPackage.createStandardWebMercatorTileTable(geopackage, tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId, 0, 0).then(function (tileMatrixSet) {
                should.exist(tileMatrixSet);
                // @ts-ignore
                fs.readFile(tilePath, function (err, tile) {
                    var result = geopackage.addTile(tile, tableName, 0, 0, 0);
                    result.should.be.equal(1);
                    index_1.GeoPackage.xyzTile(geopackage, tableName, 0, 0, 0, 256, 256).then(function (tile) {
                        // @ts-ignore
                        testSetup.diffImages(tile, tilePath, function (err, equal) {
                            equal.should.be.equal(true);
                            done();
                        });
                    });
                });
            });
        });
        it('should add a tile to the tile table and get it into a canvas via xyz', function (done) {
            // @ts-ignore
            var columns = [];
            var tableName = 'tiles_web_mercator_4';
            var contentsBoundingBox = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var contentsSrsId = 3857;
            var tileMatrixSetBoundingBox = new index_2.BoundingBox(-20037508.342789244, 20037508.342789244, -20037508.342789244, 20037508.342789244);
            var tileMatrixSetSrsId = 3857;
            // @ts-ignore
            index_1.GeoPackage.createStandardWebMercatorTileTable(geopackage, tableName, contentsBoundingBox, contentsSrsId, tileMatrixSetBoundingBox, tileMatrixSetSrsId, 0, 0).then(function (tileMatrixSet) {
                should.exist(tileMatrixSet);
                // @ts-ignore
                fs.readFile(tilePath, function (err, tile) {
                    var result = geopackage.addTile(tile, tableName, 0, 0, 0);
                    result.should.be.equal(1);
                    var canvas;
                    if (typeof process !== 'undefined' && process.version) {
                        var Canvas = require('canvas');
                        canvas = Canvas.createCanvas(256, 256);
                    }
                    else {
                        canvas = document.createElement('canvas');
                    }
                    index_1.GeoPackage.xyzTile(geopackage, tableName, 0, 0, 0, 256, 256, canvas)
                        // @ts-ignore
                        .then(function (tile) {
                        // @ts-ignore
                        testSetup.diffCanvas(canvas, tilePath, function (err, equal) {
                            equal.should.be.equal(true);
                            done();
                        });
                    });
                });
            });
        });
    });
});
//# sourceMappingURL=testGeopackage.js.map